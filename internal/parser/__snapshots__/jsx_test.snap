
[TestParseJSXNoErrors/SelfClosingNoAttrs - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
        },
        SelfClose: true,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
    },
    Closing:  (*ast.JSXClosing)(nil),
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/NoAttrsNoChildren - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "Foo",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
    },
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:12},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/SelfClosingAttrs - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
            &ast.JSXAttr{
                Name:  "bar",
                Value: &&ast.JSXExprContainer{
                    Expr: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 5,
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:11},
                                End:      ast.Location{Line:1, Column:12},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:10},
                        End:      ast.Location{Line:1, Column:11},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
            },
            &ast.JSXAttr{
                Name:  "baz",
                Value: &&ast.JSXString{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:18},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:18},
                    End:      ast.Location{Line:1, Column:25},
                    SourceID: 0,
                },
            },
        },
        SelfClose: true,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:28},
            SourceID: 0,
        },
    },
    Closing:  (*ast.JSXClosing)(nil),
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:28},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/AttrsNoChildren - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
            &ast.JSXAttr{
                Name:  "bar",
                Value: &&ast.JSXExprContainer{
                    Expr: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 5,
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:11},
                                End:      ast.Location{Line:1, Column:12},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:10},
                        End:      ast.Location{Line:1, Column:11},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
            },
            &ast.JSXAttr{
                Name:  "baz",
                Value: &&ast.JSXString{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:18},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:18},
                    End:      ast.Location{Line:1, Column:25},
                    SourceID: 0,
                },
            },
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "Foo",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:26},
            End:      ast.Location{Line:1, Column:32},
            SourceID: 0,
        },
    },
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:32},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/ChildElements - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "div",
        Attrs: {
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "div",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:35},
            SourceID: 0,
        },
    },
    Children: {
        &ast.JSXElementExpr{
            Opening: &ast.JSXOpening{
                Name:  "span",
                Attrs: {
                },
                SelfClose: false,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:6},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
            },
            Closing: &ast.JSXClosing{
                Name: "span",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:17},
                    End:      ast.Location{Line:1, Column:24},
                    SourceID: 0,
                },
            },
            Children: {
                &ast.JSXText{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:24},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.JSXText{
            Value: "world",
            span:  ast.Span{
                Start:    ast.Location{Line:1, Column:24},
                End:      ast.Location{Line:1, Column:29},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:35},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/ChildExpr - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "div",
        Attrs: {
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "div",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:18},
            End:      ast.Location{Line:1, Column:24},
            SourceID: 0,
        },
    },
    Children: {
        &ast.JSXText{
            Value: "hello, ",
            span:  ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
        },
        &ast.JSXExprContainer{
            Expr: &ast.IdentExpr{
                Name:      "msg",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:14},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:17},
                End:      ast.Location{Line:1, Column:18},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:24},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/Nesting - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "div",
        Attrs: {
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "div",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:26},
            End:      ast.Location{Line:1, Column:32},
            SourceID: 0,
        },
    },
    Children: {
        &ast.JSXExprContainer{
            Expr: &ast.JSXElementExpr{
                Opening: &ast.JSXOpening{
                    Name:  "span",
                    Attrs: {
                    },
                    SelfClose: false,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:13},
                        SourceID: 0,
                    },
                },
                Closing: &ast.JSXClosing{
                    Name: "span",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:18},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                },
                Children: {
                    &ast.JSXExprContainer{
                        Expr: &ast.IdentExpr{
                            Name:      "foo",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:14},
                                End:      ast.Location{Line:1, Column:17},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:17},
                            End:      ast.Location{Line:1, Column:18},
                            SourceID: 0,
                        },
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:25},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:25},
                End:      ast.Location{Line:1, Column:26},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:32},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXNoErrors/Fragment - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "",
        Attrs: {
        },
        SelfClose: false,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:3},
            SourceID: 0,
        },
    },
    Closing: &ast.JSXClosing{
        Name: "",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:17},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Children: {
        &ast.JSXElementExpr{
            Opening: &ast.JSXOpening{
                Name:  "Foo",
                Attrs: {
                },
                SelfClose: true,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            Closing:  (*ast.JSXClosing)(nil),
            Children: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.JSXElementExpr{
            Opening: &ast.JSXOpening{
                Name:  "Bar",
                Attrs: {
                },
                SelfClose: true,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:10},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
            Closing:  (*ast.JSXClosing)(nil),
            Children: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXErrors/MissingEqualsInStringAttr - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
            &ast.JSXAttr{
                Name:  "bar",
                Value: &&ast.JSXString{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:10},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:10},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
        },
        SelfClose: true,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Closing:  (*ast.JSXClosing)(nil),
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXErrors/MissingEqualsInExprAttr - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
            &ast.JSXAttr{
                Name:  "bar",
                Value: &&ast.JSXExprContainer{
                    Expr: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 5,
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:11},
                                End:      ast.Location{Line:1, Column:12},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:10},
                        End:      ast.Location{Line:1, Column:11},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
            },
        },
        SelfClose: true,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:16},
            SourceID: 0,
        },
    },
    Closing:  (*ast.JSXClosing)(nil),
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:16},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseJSXErrors/MissingEqualsInStringAttr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:17},
            SourceID: 0,
        },
        Message: "Expected '='",
    },
}
---

[TestParseJSXErrors/MissingEqualsInExprAttr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:11},
            SourceID: 0,
        },
        Message: "Expected '='",
    },
}
---

[TestParseJSXNoErrors/MultipleLines - 1]
&ast.JSXElementExpr{
    Opening: &ast.JSXOpening{
        Name:  "Foo",
        Attrs: {
            &ast.JSXAttr{
                Name:  "bar",
                Value: &&ast.JSXExprContainer{
                    Expr: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 5,
                            span:  ast.Span{
                                Start:    ast.Location{Line:2, Column:8},
                                End:      ast.Location{Line:2, Column:9},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:2, Column:8},
                            End:      ast.Location{Line:2, Column:9},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:2, Column:7},
                        End:      ast.Location{Line:2, Column:8},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:2, Column:9},
                    End:      ast.Location{Line:2, Column:10},
                    SourceID: 0,
                },
            },
            &ast.JSXAttr{
                Name:  "baz",
                Value: &&ast.JSXString{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:3, Column:7},
                        End:      ast.Location{Line:3, Column:14},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:3, Column:7},
                    End:      ast.Location{Line:3, Column:14},
                    SourceID: 0,
                },
            },
        },
        SelfClose: true,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:4, Column:3},
            SourceID: 0,
        },
    },
    Closing:  (*ast.JSXClosing)(nil),
    Children: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:4, Column:3},
        SourceID: 0,
    },
    inferredType: nil,
}
---
