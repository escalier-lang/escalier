
[TestParseTypeAnnNoErrors/FuncWithoutParams - 1]
&ast.FuncTypeAnn{
    TypeParams: nil,
    Params:     {
    },
    Return: &ast.NumberTypeAnn{
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:15},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:15},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/StringLiteralTypeAnn - 1]
&ast.LitTypeAnn{
    Lit: &ast.StrLit{
        Value: "hello",
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/NumberTypeAnn - 1]
&ast.NumberTypeAnn{
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/StringTypeAnn - 1]
&ast.StringTypeAnn{
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/NumberLiteralTypeAnn - 1]
&ast.LitTypeAnn{
    Lit: &ast.NumLit{
        Value: 5,
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:2},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/FuncWithParams - 1]
&ast.FuncTypeAnn{
    TypeParams: nil,
    Params:     {
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "x",
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:4},
                    End:      ast.Location{Line:1, Column:5},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.NumberTypeAnn{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "y",
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:15},
                    End:      ast.Location{Line:1, Column:16},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.StringTypeAnn{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:18},
                    End:      ast.Location{Line:1, Column:24},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
    },
    Return: &ast.BooleanTypeAnn{
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:36},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:36},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/FuncWithTypeParams - 1]
&ast.FuncTypeAnn{
    TypeParams: {
        &ast.TypeParam{
            Name:       "T",
            Constraint: &ast.NumberTypeAnn{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Default: nil,
        },
        &ast.TypeParam{
            Name:       "U",
            Constraint: &ast.StringTypeAnn{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:18},
                    End:      ast.Location{Line:1, Column:24},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Default: nil,
        },
    },
    Params: {
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "x",
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:26},
                    End:      ast.Location{Line:1, Column:27},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "T",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:29},
                        End:      ast.Location{Line:1, Column:30},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:30},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "y",
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:32},
                    End:      ast.Location{Line:1, Column:33},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "U",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:35},
                        End:      ast.Location{Line:1, Column:36},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:35},
                    End:      ast.Location{Line:1, Column:36},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
    },
    Return: &ast.BooleanTypeAnn{
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:41},
            End:      ast.Location{Line:1, Column:48},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:48},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/UnionAndIntersectionType - 1]
&ast.UnionTypeAnn{
    Types: {
        &ast.IntersectionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "A",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:1},
                            End:      ast.Location{Line:1, Column:2},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:1},
                        End:      ast.Location{Line:1, Column:2},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "B",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:5},
                            End:      ast.Location{Line:1, Column:6},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.IntersectionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "X",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:9},
                            End:      ast.Location{Line:1, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:9},
                        End:      ast.Location{Line:1, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Y",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:13},
                            End:      ast.Location{Line:1, Column:14},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:13},
                        End:      ast.Location{Line:1, Column:14},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IntersectionType - 1]
&ast.IntersectionTypeAnn{
    Types: {
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "A",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:1},
                    End:      ast.Location{Line:1, Column:2},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "B",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "C",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/UnionType - 1]
&ast.UnionTypeAnn{
    Types: {
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "A",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:1},
                    End:      ast.Location{Line:1, Column:2},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "B",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "C",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IndexedTypeWithDot - 1]
&ast.TypeRefTypeAnn{
    Name: &ast.Member{
        Left: &ast.Ident{
            Name: "A",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
        },
        Right: &ast.Ident{
            Name: "B",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
    },
    TypeArgs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:4},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IndexedTypeWithBrackets - 1]
&ast.IndexTypeAnn{
    Target: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "A",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Index: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "B",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:3},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:5},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/MutableType - 1]
&ast.MutableTypeAnn{
    Target: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "A",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:5},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/ConditionalType - 1]
&ast.CondTypeAnn{
    Check: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "A",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:5},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Extends: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "B",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:8},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:8},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cons: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "C",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:12},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:12},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Alt: &ast.TypeRefTypeAnn{
        Name: &ast.Ident{
            Name: "D",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:23},
                End:      ast.Location{Line:1, Column:24},
                SourceID: 0,
            },
        },
        TypeArgs: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:23},
            End:      ast.Location{Line:1, Column:24},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:24},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/BasicObjectType - 1]
&ast.ObjectTypeAnn{
    Elems: {
        &ast.PropertyTypeAnn{
            Name: &ast.IdentExpr{
                Name:      "a",
                Namespace: "",
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:2},
                    End:      ast.Location{Line:1, Column:3},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "A",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.IdentExpr{
                Name:      "b",
                Namespace: "",
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "B",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:13},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:      "c",
                    Namespace: "",
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "C",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:20},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:20},
                    End:      ast.Location{Line:1, Column:21},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:      "d",
                    Namespace: "",
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:24},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name: &ast.Ident{
                    Name: "D",
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:29},
                        End:      ast.Location{Line:1, Column:30},
                        SourceID: 0,
                    },
                },
                TypeArgs: {
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:30},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:31},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/MappedObjectType - 1]
&ast.ObjectTypeAnn{
    Elems: {
        &ast.MappedTypeAnn{
            TypeParam: &ast.IndexParamTypeAnn{
                Name:       "K",
                Constraint: &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Keys",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:21},
                            End:      ast.Location{Line:1, Column:25},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                        &ast.TypeRefTypeAnn{
                            Name: &ast.Ident{
                                Name: "T",
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:26},
                                    End:      ast.Location{Line:1, Column:27},
                                    SourceID: 0,
                                },
                            },
                            TypeArgs: {
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:26},
                                End:      ast.Location{Line:1, Column:27},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:21},
                        End:      ast.Location{Line:1, Column:28},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            Name:  nil,
            Value: &ast.IndexTypeAnn{
                Target: &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "T",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:8},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:8},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Index: &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "K",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:9},
                            End:      ast.Location{Line:1, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:9},
                        End:      ast.Location{Line:1, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:11},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: (*ast.MappedModifier)(nil),
            ReadOnly: (*ast.MappedModifier)(nil),
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:29},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/QualifiedTypeRefWithTypeArgs - 1]
&ast.TypeRefTypeAnn{
    Name: &ast.Member{
        Left: &ast.Ident{
            Name: "Foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
        Right: &ast.Ident{
            Name: "Bar",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
        },
    },
    TypeArgs: {
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "T",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "U",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:12},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/QualifiedTypeRef - 1]
&ast.TypeRefTypeAnn{
    Name: &ast.Member{
        Left: &ast.Ident{
            Name: "Foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
        Right: &ast.Ident{
            Name: "Bar",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
        },
    },
    TypeArgs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/DeepQualifiedTypeRef - 1]
&ast.TypeRefTypeAnn{
    Name: &ast.Member{
        Left: &ast.Member{
            Left: &ast.Ident{
                Name: "Foo",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:1},
                    End:      ast.Location{Line:1, Column:4},
                    SourceID: 0,
                },
            },
            Right: &ast.Ident{
                Name: "Bar",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:8},
                    SourceID: 0,
                },
            },
        },
        Right: &ast.Ident{
            Name: "Baz",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
    },
    TypeArgs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:12},
        SourceID: 0,
    },
    inferredType: nil,
}
---
