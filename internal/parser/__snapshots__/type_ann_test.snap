
[TestParseTypeAnnNoErrors/FuncWithoutParams - 1]
&ast.FuncTypeAnn{
    TypeParams: nil,
    Params:     {
    },
    Return: &ast.NumberTypeAnn{
        span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:15},
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:15},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/StringLiteralTypeAnn - 1]
&ast.LitTypeAnn{
    Lit: &ast.StrLit{
        Value: "hello",
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:8},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/NumberTypeAnn - 1]
&ast.NumberTypeAnn{
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/StringTypeAnn - 1]
&ast.StringTypeAnn{
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/NumberLiteralTypeAnn - 1]
&ast.LitTypeAnn{
    Lit: &ast.NumLit{
        Value: 5,
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:2},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/FuncWithParams - 1]
&ast.FuncTypeAnn{
    TypeParams: nil,
    Params:     {
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "x",
                Default: nil,
                span:    ast.Span{
                    Start: ast.Location{Line:1, Column:4},
                    End:   ast.Location{Line:1, Column:5},
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.NumberTypeAnn{
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:7},
                    End:   ast.Location{Line:1, Column:13},
                },
                inferredType: nil,
            },
        },
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "y",
                Default: nil,
                span:    ast.Span{
                    Start: ast.Location{Line:1, Column:15},
                    End:   ast.Location{Line:1, Column:16},
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.StringTypeAnn{
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:18},
                    End:   ast.Location{Line:1, Column:24},
                },
                inferredType: nil,
            },
        },
    },
    Return: &ast.BooleanTypeAnn{
        span: ast.Span{
            Start: ast.Location{Line:1, Column:29},
            End:   ast.Location{Line:1, Column:36},
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:36},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/FuncWithTypeParams - 1]
&ast.FuncTypeAnn{
    TypeParams: {
        &ast.TypeParam{
            Name:       "T",
            Constraint: &ast.NumberTypeAnn{
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:7},
                    End:   ast.Location{Line:1, Column:13},
                },
                inferredType: nil,
            },
            Default: nil,
        },
        &ast.TypeParam{
            Name:       "U",
            Constraint: &ast.StringTypeAnn{
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:18},
                    End:   ast.Location{Line:1, Column:24},
                },
                inferredType: nil,
            },
            Default: nil,
        },
    },
    Params: {
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "x",
                Default: nil,
                span:    ast.Span{
                    Start: ast.Location{Line:1, Column:26},
                    End:   ast.Location{Line:1, Column:27},
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.TypeRefTypeAnn{
                Name:     "T",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:29},
                    End:   ast.Location{Line:1, Column:30},
                },
                inferredType: nil,
            },
        },
        &ast.Param{
            Pattern: &ast.IdentPat{
                Name:    "y",
                Default: nil,
                span:    ast.Span{
                    Start: ast.Location{Line:1, Column:32},
                    End:   ast.Location{Line:1, Column:33},
                },
                inferredType: nil,
            },
            Optional: false,
            TypeAnn:  &ast.TypeRefTypeAnn{
                Name:     "U",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:35},
                    End:   ast.Location{Line:1, Column:36},
                },
                inferredType: nil,
            },
        },
    },
    Return: &ast.BooleanTypeAnn{
        span: ast.Span{
            Start: ast.Location{Line:1, Column:41},
            End:   ast.Location{Line:1, Column:48},
        },
        inferredType: nil,
    },
    Throws: nil,
    span:   ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:48},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/UnionAndIntersectionType - 1]
&ast.UnionTypeAnn{
    Types: {
        &ast.IntersectionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name:     "A",
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name:     "B",
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.IntersectionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name:     "X",
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name:     "Y",
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:14},
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:14},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IntersectionType - 1]
&ast.IntersectionTypeAnn{
    Types: {
        &ast.TypeRefTypeAnn{
            Name:     "A",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name:     "B",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name:     "C",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/UnionType - 1]
&ast.UnionTypeAnn{
    Types: {
        &ast.TypeRefTypeAnn{
            Name:     "A",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name:     "B",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.TypeRefTypeAnn{
            Name:     "C",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IndexedTypeWithDot - 1]
&ast.IndexTypeAnn{
    Target: &ast.TypeRefTypeAnn{
        Name:     "A",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.LitTypeAnn{
        Lit: &ast.StrLit{
            Value: "B",
            span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:2},
            End:   ast.Location{Line:1, Column:3},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/IndexedTypeWithBrackets - 1]
&ast.IndexTypeAnn{
    Target: &ast.TypeRefTypeAnn{
        Name:     "A",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.TypeRefTypeAnn{
        Name:     "B",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:3},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:5},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/MutableType - 1]
&ast.MutableTypeAnn{
    Target: &ast.TypeRefTypeAnn{
        Name:     "A",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:5},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/ConditionalType - 1]
&ast.CondTypeAnn{
    Check: &ast.TypeRefTypeAnn{
        Name:     "A",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        inferredType: nil,
    },
    Extends: &ast.TypeRefTypeAnn{
        Name:     "B",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:9},
        },
        inferredType: nil,
    },
    Cons: &ast.TypeRefTypeAnn{
        Name:     "C",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:12},
            End:   ast.Location{Line:1, Column:13},
        },
        inferredType: nil,
    },
    Alt: &ast.TypeRefTypeAnn{
        Name:     "D",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:23},
            End:   ast.Location{Line:1, Column:24},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:24},
    },
    inferredType: nil,
}
---

[TestParseTypeAnnNoErrors/BasicObjectType - 1]
&ast.ObjectTypeAnn{
    Elems: {
        &ast.PropertyTypeAnn{
            Name: &ast.IdentExpr{
                Name:   "a",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name:     "A",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.IdentExpr{
                Name:   "b",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
                inferredType: nil,
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name:     "B",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:13},
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:   "c",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:16},
                        End:   ast.Location{Line:1, Column:17},
                    },
                    inferredType: nil,
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name:     "C",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:20},
                    End:   ast.Location{Line:1, Column:21},
                },
                inferredType: nil,
            },
        },
        &ast.PropertyTypeAnn{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:   "d",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:24},
                        End:   ast.Location{Line:1, Column:25},
                    },
                    inferredType: nil,
                },
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.TypeRefTypeAnn{
                Name:     "D",
                TypeArgs: {
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:29},
                    End:   ast.Location{Line:1, Column:30},
                },
                inferredType: nil,
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:31},
    },
    inferredType: nil,
}
---
