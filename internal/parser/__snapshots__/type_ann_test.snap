
[TestParseTypeAnnNoErrors/FuncWithoutParams - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.FuncTypeAnn{
        TypeParams: nil,
        Params:     {
        },
        Return: &ast.TypeRefTypeAnn{
            Name:     "number",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:15},
            },
            inferredType: nil,
        },
        Throws: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:15},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/StringLiteralTypeAnn - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.LitTypeAnn{
        Lit: &ast.StrLit{
            Value: "hello",
            span:  ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/NumberTypeAnn - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.TypeRefTypeAnn{
        Name:     "number",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/StringTypeAnn - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.TypeRefTypeAnn{
        Name:     "string",
        TypeArgs: {
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/NumberLiteralTypeAnn - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.LitTypeAnn{
        Lit: &ast.NumLit{
            Value: 5,
            span:  ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/FuncWithParams - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.FuncTypeAnn{
        TypeParams: nil,
        Params:     {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "x",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:5},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  {
                    &ast.TypeRefTypeAnn{
                        Name:     "number",
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:7},
                            End:   ast.Location{Line:1, Column:13},
                        },
                        inferredType: nil,
                    },
                },
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "y",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:15},
                        End:   ast.Location{Line:1, Column:16},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  {
                    &ast.TypeRefTypeAnn{
                        Name:     "string",
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:18},
                            End:   ast.Location{Line:1, Column:24},
                        },
                        inferredType: nil,
                    },
                },
            },
        },
        Return: &ast.TypeRefTypeAnn{
            Name:     "boolean",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:29},
                End:   ast.Location{Line:1, Column:36},
            },
            inferredType: nil,
        },
        Throws: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:36},
        },
        inferredType: nil,
    },
}
---

[TestParseTypeAnnNoErrors/FuncWithTypeParams - 1]
optional.Option[github.com/escalier-lang/escalier/internal/ast.TypeAnn]{
    &ast.FuncTypeAnn{
        TypeParams: {
            {
                {
                    Name:       "T",
                    Constraint: {
                        &ast.TypeRefTypeAnn{
                            Name:     "number",
                            TypeArgs: {
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:7},
                                End:   ast.Location{Line:1, Column:13},
                            },
                            inferredType: nil,
                        },
                    },
                    Default: nil,
                },
                {
                    Name:       "U",
                    Constraint: {
                        &ast.TypeRefTypeAnn{
                            Name:     "string",
                            TypeArgs: {
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:18},
                                End:   ast.Location{Line:1, Column:24},
                            },
                            inferredType: nil,
                        },
                    },
                    Default: nil,
                },
            },
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "x",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:26},
                        End:   ast.Location{Line:1, Column:27},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  {
                    &ast.TypeRefTypeAnn{
                        Name:     "T",
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:29},
                            End:   ast.Location{Line:1, Column:30},
                        },
                        inferredType: nil,
                    },
                },
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "y",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:32},
                        End:   ast.Location{Line:1, Column:33},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  {
                    &ast.TypeRefTypeAnn{
                        Name:     "U",
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:35},
                            End:   ast.Location{Line:1, Column:36},
                        },
                        inferredType: nil,
                    },
                },
            },
        },
        Return: &ast.TypeRefTypeAnn{
            Name:     "boolean",
            TypeArgs: {
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:41},
                End:   ast.Location{Line:1, Column:48},
            },
            inferredType: nil,
        },
        Throws: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:48},
        },
        inferredType: nil,
    },
}
---
