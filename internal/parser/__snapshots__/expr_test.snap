
[TestParseExprNoErrors/NumberLiteralLeadingDecimal - 1]
&ast.LiteralExpr{
    Lit:  &ast.NumLit{Value:0.5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MultipleIndexes - 1]
&ast.IndexExpr{
    Object: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name: "i",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:4},
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:5},
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name: "j",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name: "foo",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name: "bar",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "base",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        Op:    0,
        Right: &ast.IdentExpr{
            Name: "offset",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:17},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:17},
        },
        inferredType: nil,
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:18},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulAdd - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    2,
        Right: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
        Op:    2,
        Right: &ast.IdentExpr{
            Name: "d",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:13},
                End:   ast.Location{Line:1, Column:14},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:14},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Parens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    2,
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    0,
        Right: &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NestedTemplateStringLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:14},
                End:   ast.Location{Line:1, Column:16},
            },
        },
    },
    Exprs: {
        &ast.TemplateLitExpr{
            Quasis: {
                &ast.Quasi{
                    Value: "b",
                    Span:  ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
                &ast.Quasi{
                    Value: "d",
                    Span:  ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:13},
                    },
                },
            },
            Exprs: {
                &ast.IdentExpr{
                    Name: "c",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:13},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:16},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IndexPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:9},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralTrailingDecimal - 1]
&ast.LiteralExpr{
    Lit:  &ast.NumLit{Value:1},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralDecimal - 1]
&ast.LiteralExpr{
    Lit:  &ast.NumLit{Value:1.5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:4},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteral - 1]
&ast.LiteralExpr{
    Lit:  &ast.NumLit{Value:5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:2},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Addition - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.IdentExpr{
        Name: "b",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TaggedTemplateStringLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name: "gql",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "query userId { user { id } }",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:34},
            },
        },
    },
    Exprs: nil,
    span:  ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:34},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Call - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name: "foo",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:12},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Index - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "base",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    0,
        Right: &ast.IdentExpr{
            Name: "offset",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:16},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:3},
            End:   ast.Location{Line:1, Column:16},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/StringLiteral - 1]
&ast.LiteralExpr{
    Lit:  &ast.StrLit{Value:"hello"},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExpr - 1]
&ast.FuncExpr{
    Params: {
        &ast.Param{
            Name: &ast.Ident{
                Name: "a",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
        },
        &ast.Param{
            Name: &ast.Ident{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
        },
    },
    Return: nil,
    Throws: nil,
    Body:   ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name: "a",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:13},
                            End:   ast.Location{Line:1, Column:14},
                        },
                        inferredType: nil,
                    },
                    Op:    0,
                    Right: &ast.IdentExpr{
                        Name: "b",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:17},
                            End:   ast.Location{Line:1, Column:18},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:18},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:13},
                    End:   ast.Location{Line:1, Column:18},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:11},
            End:   ast.Location{Line:1, Column:20},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:20},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/SingleUnaryOp - 1]
&ast.UnaryExpr{
    Op:  1,
    Arg: &ast.LiteralExpr{
        Lit:  &ast.NumLit{Value:5},
        span: ast.Span{
            Start: ast.Location{Line:1, Column:2},
            End:   ast.Location{Line:1, Column:3},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CallPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:9},
                    End:   ast.Location{Line:1, Column:10},
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/AddSub - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    1,
        Right: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.IdentExpr{
        Name: "c",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/UnaryOps - 1]
&ast.BinaryExpr{
    Left: &ast.UnaryExpr{
        Op:  0,
        Arg: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:3},
        },
        inferredType: nil,
    },
    Op:    1,
    Right: &ast.UnaryExpr{
        Op:  1,
        Arg: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello ",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:10},
            },
        },
        &ast.Quasi{
            Value: "",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:15},
                End:   ast.Location{Line:1, Column:16},
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name: "name",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:14},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:16},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Member - 1]
&ast.MemberExpr{
    Object: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Prop: &ast.Ident{
        Name: "c",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithMultipleExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        &ast.Quasi{
            Value: "c",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:10},
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:12},
                End:   ast.Location{Line:1, Column:14},
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name: "d",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:1},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:2},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:3},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MemberPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulDiv - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    3,
        Right: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    2,
    Right: &ast.IdentExpr{
        Name: "c",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CurriedCall - 1]
&ast.CallExpr{
    Callee: &ast.CallExpr{
        Callee: &ast.CallExpr{
            Callee: &ast.IdentExpr{
                Name: "foo",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:1},
                    End:   ast.Location{Line:1, Column:4},
                },
                inferredType: nil,
            },
            Args: {
                &ast.IdentExpr{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                    inferredType: nil,
                },
            },
            OptChain: false,
            span:     ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:12},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "foo",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
    },
    Exprs: nil,
    span:  ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:5},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMember - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name: "foo",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name: "bar",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMember - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "expected an identifier after .",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    1,
        Right: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.EmptyExpr{
        span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name: "foo",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.EmptyExpr{
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedParens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    2,
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    0,
        Right: &ast.IdentExpr{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseExprErrorHandling/MismatchedParens - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/IncompleteCall - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.IdentExpr{
        Name: "b",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Unexpected token",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:1},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:2},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:3},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name: "a",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    0,
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:8},
            },
        },
        OptChain: true,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "expected an identifier after ?.",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name: "foo",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "bar",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    Exprs: nil,
    span:  ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 1]
&ast.FuncExpr{
    Params: {
        &ast.Param{
            Name: &ast.Ident{
                Name: "a",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
        },
        &ast.Param{
            Name: &ast.Ident{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
        },
    },
    Return: nil,
    Throws: nil,
    Body:   ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name: "a",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:12},
                            End:   ast.Location{Line:1, Column:13},
                        },
                        inferredType: nil,
                    },
                    Op:    0,
                    Right: &ast.IdentExpr{
                        Name: "b",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:17},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:17},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:17},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:19},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:19},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 1]
&ast.FuncExpr{
    Params: {
        &ast.Param{
            Name: &ast.Ident{
                Name: "a",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:4},
                    End:   ast.Location{Line:1, Column:5},
                },
            },
        },
        &ast.Param{
            Name: &ast.Ident{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:7},
                    End:   ast.Location{Line:1, Column:8},
                },
            },
        },
    },
    Return: nil,
    Throws: nil,
    Body:   ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name: "a",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:12},
                            End:   ast.Location{Line:1, Column:13},
                        },
                        inferredType: nil,
                    },
                    Op:    0,
                    Right: &ast.IdentExpr{
                        Name: "b",
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:17},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:17},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:17},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:19},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:19},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:11},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected an opening paren",
    },
}
---

[TestParseExprNoErrors/TemplateStringMultipleLines - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello\nworld",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:2, Column:7},
            },
        },
    },
    Exprs: nil,
    span:  ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:2, Column:7},
    },
    inferredType: nil,
}
---
