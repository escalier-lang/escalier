
[TestParseExprErrorHandling/IfElseMissingCondition - 1]
&ast.IfElseExpr{
    Cond: nil,
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:6},
                        End:      ast.Location{Line:1, Column:7},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:6},
                    End:      ast.Location{Line:1, Column:7},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:17},
                            End:      ast.Location{Line:1, Column:18},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:17},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:1, Column:20},
                SourceID: 0,
            },
        },
        Expr: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IfElseMissingCondition - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected a condition",
    },
}
---

[TestParseExprErrorHandling/IfElseMissingOpeningBraces - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:      "cond",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
    },
    Alt:  (*ast.BlockOrExpr)(nil),
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:11},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.EmptyExpr{
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "bar",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 1,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:2},
                    End:      ast.Location{Line:1, Column:3},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:3},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 2,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 3,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:8},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteCall - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        Message: "Expected ] but got )",
    },
}
---

[TestParseExprErrorHandling/MismatchedParens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:11},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:11},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:11},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IfElseMissingOpeningBraces - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedParens - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
        Message: "Expected ) but got ]",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "-",
        Right: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.EmptyExpr{
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:8},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "foo",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:5},
                SourceID: 0,
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:5},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
        Async:  false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:      "a",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:12},
                            End:      ast.Location{Line:1, Column:13},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:17},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:19},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:19},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name:      "bar",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:9},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMember - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:8},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        Message: "Unexpected token, '*'",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseExprErrorHandling/IncompleteMember - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        Message: "expected an identifier after .",
    },
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:11},
            SourceID: 0,
        },
        Message: "Expected ) but got {",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:4},
                        End:      ast.Location{Line:1, Column:5},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:8},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
        Async:  false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:      "a",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:12},
                            End:      ast.Location{Line:1, Column:13},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:17},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:19},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:19},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:8},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
        },
        OptChain: true,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected ( but got identifier",
    },
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        Message: "expected an identifier after ?.",
    },
}
---

[TestParseExprErrorHandling/IncompleteElse - 1]
&ast.IfElseExpr{
    Cond: nil,
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:6},
                        End:      ast.Location{Line:1, Column:7},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:6},
                    End:      ast.Location{Line:1, Column:7},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
    },
    Alt:  (*ast.BlockOrExpr)(nil),
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteElse - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected a condition",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:14},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
        Message: "Expected an if or an opening brace",
    },
}
---

[TestParseExprNoErrors/ObjectWithMethods - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.MethodExpr{
            Name: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                    },
                    Return: nil,
                    Throws: nil,
                    Async:  false,
                },
                Body: &ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.LiteralExpr{
                                Lit: &ast.NumLit{
                                    Value: 5,
                                    span:  ast.Span{
                                        Start:    ast.Location{Line:1, Column:22},
                                        End:      ast.Location{Line:1, Column:23},
                                        SourceID: 0,
                                    },
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:22},
                                    End:      ast.Location{Line:1, Column:23},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:15},
                                End:      ast.Location{Line:1, Column:23},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:13},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:25},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            MutSelf: &bool(false),
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
        },
        &ast.GetterExpr{
            Name: &ast.IdentExpr{
                Name:      "bar",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:31},
                    End:      ast.Location{Line:1, Column:34},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                    },
                    Return: nil,
                    Throws: nil,
                    Async:  false,
                },
                Body: &ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.MemberExpr{
                                Object: &ast.IdentExpr{
                                    Name:      "self",
                                    Namespace: 0,
                                    Source:    nil,
                                    span:      ast.Span{
                                        Start:    ast.Location{Line:1, Column:50},
                                        End:      ast.Location{Line:1, Column:54},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                Prop: &ast.Ident{
                                    Name: "x",
                                    span: ast.Span{
                                        Start:    ast.Location{Line:1, Column:55},
                                        End:      ast.Location{Line:1, Column:56},
                                        SourceID: 0,
                                    },
                                },
                                OptChain: false,
                                span:     ast.Span{
                                    Start:    ast.Location{Line:1, Column:50},
                                    End:      ast.Location{Line:1, Column:56},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:43},
                                End:      ast.Location{Line:1, Column:56},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:41},
                        End:      ast.Location{Line:1, Column:58},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:31},
                    End:      ast.Location{Line:1, Column:58},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:31},
                End:      ast.Location{Line:1, Column:42},
                SourceID: 0,
            },
        },
        &ast.SetterExpr{
            Name: &ast.IdentExpr{
                Name:      "bar",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:64},
                    End:      ast.Location{Line:1, Column:67},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                        &ast.Param{
                            Pattern: &ast.IdentPat{
                                Name:    "x",
                                TypeAnn: nil,
                                Default: nil,
                                span:    ast.Span{
                                    Start:    ast.Location{Line:1, Column:78},
                                    End:      ast.Location{Line:1, Column:79},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            Optional: false,
                            TypeAnn:  nil,
                        },
                    },
                    Return: nil,
                    Throws: nil,
                    Async:  false,
                },
                Body: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.BinaryExpr{
                                Left: &ast.MemberExpr{
                                    Object: &ast.IdentExpr{
                                        Name:      "this",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:1, Column:83},
                                            End:      ast.Location{Line:1, Column:87},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                    Prop: &ast.Ident{
                                        Name: "x",
                                        span: ast.Span{
                                            Start:    ast.Location{Line:1, Column:88},
                                            End:      ast.Location{Line:1, Column:89},
                                            SourceID: 0,
                                        },
                                    },
                                    OptChain: false,
                                    span:     ast.Span{
                                        Start:    ast.Location{Line:1, Column:83},
                                        End:      ast.Location{Line:1, Column:89},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                Op:    "=",
                                Right: &ast.IdentExpr{
                                    Name:      "x",
                                    Namespace: 0,
                                    Source:    nil,
                                    span:      ast.Span{
                                        Start:    ast.Location{Line:1, Column:92},
                                        End:      ast.Location{Line:1, Column:93},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:83},
                                    End:      ast.Location{Line:1, Column:93},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:83},
                                End:      ast.Location{Line:1, Column:93},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:81},
                        End:      ast.Location{Line:1, Column:95},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:64},
                    End:      ast.Location{Line:1, Column:95},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:64},
                End:      ast.Location{Line:1, Column:82},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:97},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Call - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:8},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:11},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralTrailingDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 1,
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:3},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:3},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Index - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "base",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:      "offset",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:16},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:3},
            End:      ast.Location{Line:1, Column:16},
            SourceID: 0,
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:17},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/UnaryOps - 1]
&ast.BinaryExpr{
    Left: &ast.UnaryExpr{
        Op:  0,
        Arg: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:3},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:3},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "-",
    Right: &ast.UnaryExpr{
        Op:  1,
        Arg: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringMultipleLines - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello\nworld",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:2, Column:7},
                SourceID: 0,
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:2, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TaggedTemplateStringLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name:      "gql",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "query userId { user { id } }",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:34},
                SourceID: 0,
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:34},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 1,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:2},
                    End:      ast.Location{Line:1, Column:3},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:3},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 2,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 3,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:8},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/EmptyObject - 1]
&ast.ObjectExpr{
    Elems: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:3},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Member - 1]
&ast.MemberExpr{
    Object: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "b",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Prop: &ast.Ident{
        Name: "c",
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Parens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:11},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:11},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:11},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/StringLiteral - 1]
&ast.LiteralExpr{
    Lit: &ast.StrLit{
        Value: "hello",
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IndexPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:9},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IfElse - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:      "cond",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:11},
                        End:      ast.Location{Line:1, Column:12},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:22},
                            End:      ast.Location{Line:1, Column:23},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:22},
                        End:      ast.Location{Line:1, Column:23},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:20},
                End:      ast.Location{Line:1, Column:25},
                SourceID: 0,
            },
        },
        Expr: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:25},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/SingleUnaryOp - 1]
&ast.UnaryExpr{
    Op:  1,
    Arg: &ast.LiteralExpr{
        Lit: &ast.NumLit{
            Value: 5,
            span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:3},
                SourceID: 0,
            },
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:2},
            End:      ast.Location{Line:1, Column:3},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:3},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NestedTemplateStringLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:5},
                SourceID: 0,
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:16},
                SourceID: 0,
            },
        },
    },
    Exprs: {
        &ast.TemplateLitExpr{
            Quasis: {
                &ast.Quasi{
                    Value: "b",
                    Span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:6},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                },
                &ast.Quasi{
                    Value: "d",
                    Span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:11},
                        End:      ast.Location{Line:1, Column:13},
                        SourceID: 0,
                    },
                },
            },
            Exprs: {
                &ast.IdentExpr{
                    Name:      "c",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:9},
                        End:      ast.Location{Line:1, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:16},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IfElseChaining - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:      "cond1",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:13},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:12},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:15},
            SourceID: 0,
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: (*ast.Block)(nil),
        Expr:  &ast.IfElseExpr{
            Cond: &ast.IdentExpr{
                Name:      "cond2",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:24},
                    End:      ast.Location{Line:1, Column:29},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Cons: ast.Block{
                Stmts: {
                    &ast.ExprStmt{
                        Expr: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:32},
                                End:      ast.Location{Line:1, Column:33},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:32},
                            End:      ast.Location{Line:1, Column:33},
                            SourceID: 0,
                        },
                    },
                },
                Span: ast.Span{
                    Start:    ast.Location{Line:1, Column:30},
                    End:      ast.Location{Line:1, Column:35},
                    SourceID: 0,
                },
            },
            Alt: &ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.IdentExpr{
                                Name:      "c",
                                Namespace: 0,
                                Source:    nil,
                                span:      ast.Span{
                                    Start:    ast.Location{Line:1, Column:43},
                                    End:      ast.Location{Line:1, Column:44},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:43},
                                End:      ast.Location{Line:1, Column:44},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:41},
                        End:      ast.Location{Line:1, Column:46},
                        SourceID: 0,
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:20},
                End:      ast.Location{Line:1, Column:46},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:46},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteral - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 5,
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:2},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/AddSub - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "-",
        Right: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:      "c",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 1.5,
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:4},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CurriedCall - 1]
&ast.CallExpr{
    Callee: &ast.CallExpr{
        Callee: &ast.CallExpr{
            Callee: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:1},
                    End:      ast.Location{Line:1, Column:4},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Args: {
                &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            OptChain: false,
            span:     ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name:      "b",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:11},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "base",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:      "offset",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:11},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:17},
            SourceID: 0,
        },
        inferredType: nil,
    },
    OptChain: true,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:18},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulDiv - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "/",
        Right: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.IdentExpr{
        Name:      "c",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulAdd - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "*",
        Right: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:      "c",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Op:    "*",
        Right: &ast.IdentExpr{
            Name:      "d",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:13},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello ",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
        },
        &ast.Quasi{
            Value: "",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:1, Column:16},
                SourceID: 0,
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name:      "name",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:16},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MemberPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "c",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CallPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name:      "foo",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name:      "b",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:11},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:11},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithMultipleExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:5},
                SourceID: 0,
            },
        },
        &ast.Quasi{
            Value: "c",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start:    ast.Location{Line:1, Column:12},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name:      "b",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:      "d",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:11},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Addition - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:      "bar",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
            inferredType: nil,
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralLeadingDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 0.5,
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:3},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:3},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MultipleIndexes - 1]
&ast.IndexExpr{
    Object: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name:      "a",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:2},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name:      "i",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name:      "j",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExpr - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
        Async:  false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:      "a",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:13},
                            End:      ast.Location{Line:1, Column:14},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:17},
                            End:      ast.Location{Line:1, Column:18},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:13},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:13},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/BasicObject - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.NumLit{
                Value: 0,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:4},
                    SourceID: 0,
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.StrLit{
                    Value: "hello",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:6},
                        End:      ast.Location{Line:1, Column:13},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:6},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:15},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:20},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:20},
                    End:      ast.Location{Line:1, Column:21},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:1, Column:21},
                SourceID: 0,
            },
        },
        &ast.PropertyExpr{
            Name: &ast.StrLit{
                Value: "bar",
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:23},
                    End:      ast.Location{Line:1, Column:28},
                    SourceID: 0,
                },
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.BoolLit{
                    Value: true,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:31},
                        End:      ast.Location{Line:1, Column:35},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:31},
                    End:      ast.Location{Line:1, Column:35},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:23},
                End:      ast.Location{Line:1, Column:35},
                SourceID: 0,
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "baz",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:37},
                    End:      ast.Location{Line:1, Column:40},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    nil,
            span:     ast.Span{
                Start:    ast.Location{Line:1, Column:37},
                End:      ast.Location{Line:1, Column:40},
                SourceID: 0,
            },
        },
        &ast.PropertyExpr{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:      "qux",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:43},
                        End:      ast.Location{Line:1, Column:46},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.BoolLit{
                    Value: false,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:49},
                        End:      ast.Location{Line:1, Column:54},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:49},
                    End:      ast.Location{Line:1, Column:54},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:43},
                End:      ast.Location{Line:1, Column:54},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:56},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingComma - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingComma - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:10},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected } but got identifier",
    },
}
---

[TestParseExprErrorHandling/ObjectMissingColon - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:8},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:8},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "bar",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:10},
                    End:      ast.Location{Line:1, Column:13},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 10,
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:15},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:15},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:19},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingColon - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        Message: "Expected a comma or closing brace",
    },
}
---

[TestParseExprNoErrors/LessThanEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "<=",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/GreaterThan - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    ">",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/GreaterThanEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    ">=",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/LessThan - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "<",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NotEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "!=",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Equal - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "==",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:      "foo",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Args: {
    },
    OptChain: false,
    span:     ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ObjectWithSpreads - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:      "a",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:2},
                    End:      ast.Location{Line:1, Column:3},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    nil,
            span:     ast.Span{
                Start:    ast.Location{Line:1, Column:2},
                End:      ast.Location{Line:1, Column:3},
                SourceID: 0,
            },
        },
        &ast.RestSpreadExpr{
            Value: &ast.IdentExpr{
                Name:      "b",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:8},
                    End:      ast.Location{Line:1, Column:9},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:9},
                SourceID: 0,
            },
        },
        &ast.RestSpreadExpr{
            Value: &ast.ObjectExpr{
                Elems: {
                    &ast.PropertyExpr{
                        Name: &ast.IdentExpr{
                            Name:      "c",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:15},
                                End:      ast.Location{Line:1, Column:16},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Optional: false,
                        Readonly: false,
                        Value:    nil,
                        span:     ast.Span{
                            Start:    ast.Location{Line:1, Column:15},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                    },
                    &ast.PropertyExpr{
                        Name: &ast.IdentExpr{
                            Name:      "d",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:18},
                                End:      ast.Location{Line:1, Column:19},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Optional: false,
                        Readonly: false,
                        Value:    nil,
                        span:     ast.Span{
                            Start:    ast.Location{Line:1, Column:18},
                            End:      ast.Location{Line:1, Column:19},
                            SourceID: 0,
                        },
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:14},
                    End:      ast.Location{Line:1, Column:20},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:11},
                End:      ast.Location{Line:1, Column:20},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MethodCall - 1]
&ast.BinaryExpr{
    Left: &ast.CallExpr{
        Callee: &ast.MemberExpr{
            Object: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:1},
                    End:      ast.Location{Line:1, Column:4},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Prop: &ast.Ident{
                Name: "bar",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:5},
                    End:      ast.Location{Line:1, Column:8},
                    SourceID: 0,
                },
            },
            OptChain: false,
            span:     ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Args: {
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "/",
    Right: &ast.IdentExpr{
        Name:      "baz",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/RegexLiteral - 1]
&ast.LiteralExpr{
    Lit: &ast.RegexLit{
        Value: "/hello/gi",
        span:  ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:9},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Concatenation - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:      "a",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:2},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Op:    "++",
    Right: &ast.IdentExpr{
        Name:      "b",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:7},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:7},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MatchBasic - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 1,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "one",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:21},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 2,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:23},
                    End:      ast.Location{Line:1, Column:24},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "two",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:28},
                            End:      ast.Location{Line:1, Column:33},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:28},
                        End:      ast.Location{Line:1, Column:33},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:22},
                End:      ast.Location{Line:1, Column:33},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:35},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MatchComplex - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "result",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.ExtractorPat{
                Name: "Some",
                Args: {
                    &ast.IdentPat{
                        Name:    "value",
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:21},
                            End:      ast.Location{Line:1, Column:26},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:16},
                    End:      ast.Location{Line:1, Column:27},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: &ast.BinaryExpr{
                Left: &ast.IdentExpr{
                    Name:      "value",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:31},
                        End:      ast.Location{Line:1, Column:36},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Op:    ">",
                Right: &ast.LiteralExpr{
                    Lit: &ast.NumLit{
                        Value: 0,
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:39},
                            End:      ast.Location{Line:1, Column:40},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:39},
                        End:      ast.Location{Line:1, Column:40},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:31},
                    End:      ast.Location{Line:1, Column:40},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Body: ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.IdentExpr{
                    Name:      "value",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:44},
                        End:      ast.Location{Line:1, Column:49},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:1, Column:49},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.ExtractorPat{
                Name: "Some",
                Args: {
                    &ast.WildcardPat{
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:56},
                            End:      ast.Location{Line:1, Column:57},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:51},
                    End:      ast.Location{Line:1, Column:58},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.NumLit{
                        Value: 0,
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:62},
                            End:      ast.Location{Line:1, Column:63},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:62},
                        End:      ast.Location{Line:1, Column:63},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:50},
                End:      ast.Location{Line:1, Column:63},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "None",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:65},
                    End:      ast.Location{Line:1, Column:69},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.UnaryExpr{
                    Op:  1,
                    Arg: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 1,
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:74},
                                End:      ast.Location{Line:1, Column:75},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:74},
                            End:      ast.Location{Line:1, Column:75},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:73},
                        End:      ast.Location{Line:1, Column:75},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:64},
                End:      ast.Location{Line:1, Column:75},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:77},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MatchWithPatterns - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "value",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.ObjectPat{
                Elems: {
                    &ast.ObjShorthandPat{
                        Key: &ast.Ident{
                            Name: "name",
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:16},
                                End:      ast.Location{Line:1, Column:20},
                                SourceID: 0,
                            },
                        },
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:20},
                            SourceID: 0,
                        },
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:15},
                    End:      ast.Location{Line:1, Column:21},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.IdentExpr{
                    Name:      "name",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:25},
                        End:      ast.Location{Line:1, Column:29},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:29},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.TuplePat{
                Elems: {
                    &ast.IdentPat{
                        Name:    "first",
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:32},
                            End:      ast.Location{Line:1, Column:37},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    &ast.RestPat{
                        Pattern: &ast.IdentPat{
                            Name:    "rest",
                            TypeAnn: nil,
                            Default: nil,
                            span:    ast.Span{
                                Start:    ast.Location{Line:1, Column:42},
                                End:      ast.Location{Line:1, Column:46},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:39},
                            End:      ast.Location{Line:1, Column:46},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:31},
                    End:      ast.Location{Line:1, Column:47},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.IdentExpr{
                    Name:      "first",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:51},
                        End:      ast.Location{Line:1, Column:56},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:30},
                End:      ast.Location{Line:1, Column:56},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.WildcardPat{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:58},
                    End:      ast.Location{Line:1, Column:59},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.NullLit{
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:63},
                            End:      ast.Location{Line:1, Column:67},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:63},
                        End:      ast.Location{Line:1, Column:67},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:57},
                End:      ast.Location{Line:1, Column:67},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:69},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MatchWithGuard - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.TuplePat{
                Elems: {
                    &ast.IdentPat{
                        Name:    "a",
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:12},
                            End:      ast.Location{Line:1, Column:13},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    &ast.IdentPat{
                        Name:    "b",
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:15},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: &ast.BinaryExpr{
                Left: &ast.IdentExpr{
                    Name:      "a",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:21},
                        End:      ast.Location{Line:1, Column:22},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Op:    ">",
                Right: &ast.IdentExpr{
                    Name:      "b",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:25},
                        End:      ast.Location{Line:1, Column:26},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:21},
                    End:      ast.Location{Line:1, Column:26},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Body: ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "first is greater",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:30},
                            End:      ast.Location{Line:1, Column:48},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:30},
                        End:      ast.Location{Line:1, Column:48},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:48},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:50},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MatchWithBlock - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.WildcardPat{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.CallExpr{
                                Callee: &ast.MemberExpr{
                                    Object: &ast.IdentExpr{
                                        Name:      "console",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:2, Column:3},
                                            End:      ast.Location{Line:2, Column:10},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                    Prop: &ast.Ident{
                                        Name: "log",
                                        span: ast.Span{
                                            Start:    ast.Location{Line:2, Column:11},
                                            End:      ast.Location{Line:2, Column:14},
                                            SourceID: 0,
                                        },
                                    },
                                    OptChain: false,
                                    span:     ast.Span{
                                        Start:    ast.Location{Line:2, Column:3},
                                        End:      ast.Location{Line:2, Column:14},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                Args: {
                                    &ast.IdentExpr{
                                        Name:      "x",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:2, Column:15},
                                            End:      ast.Location{Line:2, Column:16},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                },
                                OptChain: false,
                                span:     ast.Span{
                                    Start:    ast.Location{Line:2, Column:3},
                                    End:      ast.Location{Line:2, Column:17},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:2, Column:3},
                                End:      ast.Location{Line:2, Column:17},
                                SourceID: 0,
                            },
                        },
                        &ast.ExprStmt{
                            Expr: &ast.LiteralExpr{
                                Lit: &ast.StrLit{
                                    Value: "unknown",
                                    span:  ast.Span{
                                        Start:    ast.Location{Line:3, Column:3},
                                        End:      ast.Location{Line:3, Column:12},
                                        SourceID: 0,
                                    },
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:3, Column:3},
                                    End:      ast.Location{Line:3, Column:12},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:3, Column:3},
                                End:      ast.Location{Line:3, Column:12},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:4, Column:2},
                        SourceID: 0,
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:4, Column:2},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:4, Column:4},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingOpeningBrace - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingPattern - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingOpeningBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:9},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        Message: "Expected { but got number",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected a pattern",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected pattern in match case",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected } but got =>",
    },
}
---

[TestParseExprErrorHandling/MatchMissingTarget - 1]
&ast.MatchExpr{
    Target: &ast.ObjectExpr{
        Elems: {
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingPattern - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected a pattern",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected pattern in match case",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected } but got =>",
    },
}
---

[TestParseExprErrorHandling/MatchMissingClosingBrace - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 1,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "one",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:21},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingTarget - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected a comma or closing brace",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:11},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected } but got =>",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:14},
            End:      ast.Location{Line:1, Column:19},
            SourceID: 0,
        },
        Message: "Expected { but got string",
    },
}
---

[TestParseExprErrorHandling/MatchMissingClosingBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:21},
            End:      ast.Location{Line:1, Column:21},
            SourceID: 0,
        },
        Message: "Expected } but got ",
    },
}
---

[TestParseExprErrorHandling/MatchMissingBody - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 1,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:17},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingArrow - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 1,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:19},
                        End:      ast.Location{Line:1, Column:20},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:20},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchIncompleteGuard - 1]
&ast.MatchExpr{
    Target: &ast.IdentExpr{
        Name:      "x",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        inferredType: nil,
    },
    Cases: {
        &ast.MatchCase{
            Pattern: &ast.LitPat{
                Lit: &ast.NumLit{
                    Value: 1,
                    span:  ast.Span{},
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:11},
                    End:      ast.Location{Line:1, Column:12},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: &ast.LiteralExpr{
                Lit: &ast.StrLit{
                    Value: "one",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:19},
                        End:      ast.Location{Line:1, Column:24},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:19},
                    End:      ast.Location{Line:1, Column:24},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Body: ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:26},
                        End:      ast.Location{Line:1, Column:26},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:1, Column:26},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:26},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MatchMissingBody - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:16},
            End:      ast.Location{Line:1, Column:17},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/MatchMissingArrow - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:13},
            End:      ast.Location{Line:1, Column:18},
            SourceID: 0,
        },
        Message: "Expected => but got string",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:19},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/MatchIncompleteGuard - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:16},
            End:      ast.Location{Line:1, Column:18},
            SourceID: 0,
        },
        Message: "Unexpected token, '=>'",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:25},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
        Message: "Expected => but got }",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:26},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:26},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
        Message: "Expected } but got ",
    },
}
---

[TestParseExprNoErrors/TryCatch - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "riskyOperation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:23},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:23},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:25},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:34},
                    End:      ast.Location{Line:1, Column:39},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.CallExpr{
                                Callee: &ast.MemberExpr{
                                    Object: &ast.IdentExpr{
                                        Name:      "console",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:1, Column:45},
                                            End:      ast.Location{Line:1, Column:52},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                    Prop: &ast.Ident{
                                        Name: "log",
                                        span: ast.Span{
                                            Start:    ast.Location{Line:1, Column:53},
                                            End:      ast.Location{Line:1, Column:56},
                                            SourceID: 0,
                                        },
                                    },
                                    OptChain: false,
                                    span:     ast.Span{
                                        Start:    ast.Location{Line:1, Column:45},
                                        End:      ast.Location{Line:1, Column:56},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                Args: {
                                    &ast.IdentExpr{
                                        Name:      "error",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:1, Column:57},
                                            End:      ast.Location{Line:1, Column:62},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                },
                                OptChain: false,
                                span:     ast.Span{
                                    Start:    ast.Location{Line:1, Column:45},
                                    End:      ast.Location{Line:1, Column:63},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:45},
                                End:      ast.Location{Line:1, Column:63},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:43},
                        End:      ast.Location{Line:1, Column:65},
                        SourceID: 0,
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:33},
                End:      ast.Location{Line:1, Column:65},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:65},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NestedTry - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.TryCatchExpr{
                    Try: ast.Block{
                        Stmts: {
                            &ast.ExprStmt{
                                Expr: &ast.CallExpr{
                                    Callee: &ast.IdentExpr{
                                        Name:      "innerOperation",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:1, Column:13},
                                            End:      ast.Location{Line:1, Column:27},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                    Args: {
                                    },
                                    OptChain: false,
                                    span:     ast.Span{
                                        Start:    ast.Location{Line:1, Column:13},
                                        End:      ast.Location{Line:1, Column:29},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:13},
                                    End:      ast.Location{Line:1, Column:29},
                                    SourceID: 0,
                                },
                            },
                        },
                        Span: ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:31},
                            SourceID: 0,
                        },
                    },
                    Catch: {
                        &ast.MatchCase{
                            Pattern: &ast.WildcardPat{
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:40},
                                    End:      ast.Location{Line:1, Column:41},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            Guard: nil,
                            Body:  ast.BlockOrExpr{
                                Block: (*ast.Block)(nil),
                                Expr:  &ast.LiteralExpr{
                                    Lit: &ast.NullLit{
                                        span: ast.Span{
                                            Start:    ast.Location{Line:1, Column:45},
                                            End:      ast.Location{Line:1, Column:49},
                                            SourceID: 0,
                                        },
                                    },
                                    span: ast.Span{
                                        Start:    ast.Location{Line:1, Column:45},
                                        End:      ast.Location{Line:1, Column:49},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:39},
                                End:      ast.Location{Line:1, Column:49},
                                SourceID: 0,
                            },
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:49},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:49},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:53},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "outer",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:62},
                    End:      ast.Location{Line:1, Column:67},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.IdentExpr{
                    Name:      "outer",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:71},
                        End:      ast.Location{Line:1, Column:76},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:61},
                End:      ast.Location{Line:1, Column:76},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:76},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TryBasic - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "riskyOperation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:23},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:23},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:25},
            SourceID: 0,
        },
    },
    Catch: nil,
    span:  ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:25},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TryCatchWithGuard - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "getValue",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:15},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:17},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:19},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:28},
                    End:      ast.Location{Line:1, Column:33},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: &ast.BinaryExpr{
                Left: &ast.MemberExpr{
                    Object: &ast.IdentExpr{
                        Name:      "error",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:37},
                            End:      ast.Location{Line:1, Column:42},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Prop: &ast.Ident{
                        Name: "code",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:43},
                            End:      ast.Location{Line:1, Column:47},
                            SourceID: 0,
                        },
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:37},
                        End:      ast.Location{Line:1, Column:47},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Op:    "==",
                Right: &ast.LiteralExpr{
                    Lit: &ast.NumLit{
                        Value: 404,
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:51},
                            End:      ast.Location{Line:1, Column:54},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:51},
                        End:      ast.Location{Line:1, Column:54},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:37},
                    End:      ast.Location{Line:1, Column:54},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Body: ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "Not found",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:58},
                            End:      ast.Location{Line:1, Column:69},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:58},
                        End:      ast.Location{Line:1, Column:69},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:27},
                End:      ast.Location{Line:1, Column:69},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:71},
                    End:      ast.Location{Line:1, Column:76},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.MemberExpr{
                    Object: &ast.IdentExpr{
                        Name:      "error",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:80},
                            End:      ast.Location{Line:1, Column:85},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Prop: &ast.Ident{
                        Name: "message",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:86},
                            End:      ast.Location{Line:1, Column:93},
                            SourceID: 0,
                        },
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:80},
                        End:      ast.Location{Line:1, Column:93},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:70},
                End:      ast.Location{Line:1, Column:93},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:93},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TryCatchMultipleCases - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.ExtractorPat{
                Name: "NetworkError",
                Args: {
                    &ast.IdentPat{
                        Name:    "msg",
                        TypeAnn: nil,
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:42},
                            End:      ast.Location{Line:1, Column:45},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:46},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.BinaryExpr{
                    Left: &ast.LiteralExpr{
                        Lit: &ast.StrLit{
                            Value: "Network: ",
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:50},
                                End:      ast.Location{Line:1, Column:61},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:50},
                            End:      ast.Location{Line:1, Column:61},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "++",
                    Right: &ast.IdentExpr{
                        Name:      "msg",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:65},
                            End:      ast.Location{Line:1, Column:68},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:50},
                        End:      ast.Location{Line:1, Column:68},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:68},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "TimeoutError",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:70},
                    End:      ast.Location{Line:1, Column:82},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "Timeout",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:86},
                            End:      ast.Location{Line:1, Column:95},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:86},
                        End:      ast.Location{Line:1, Column:95},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:69},
                End:      ast.Location{Line:1, Column:95},
                SourceID: 0,
            },
        },
        &ast.MatchCase{
            Pattern: &ast.WildcardPat{
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:97},
                    End:      ast.Location{Line:1, Column:98},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.LiteralExpr{
                    Lit: &ast.StrLit{
                        Value: "Unknown error",
                        span:  ast.Span{
                            Start:    ast.Location{Line:1, Column:102},
                            End:      ast.Location{Line:1, Column:117},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:102},
                        End:      ast.Location{Line:1, Column:117},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:96},
                End:      ast.Location{Line:1, Column:117},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:117},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TryCatchWithBlockBody - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "complexOperation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:23},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:25},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:27},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:36},
                    End:      ast.Location{Line:1, Column:41},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.CallExpr{
                                Callee: &ast.IdentExpr{
                                    Name:      "logError",
                                    Namespace: 0,
                                    Source:    nil,
                                    span:      ast.Span{
                                        Start:    ast.Location{Line:2, Column:3},
                                        End:      ast.Location{Line:2, Column:11},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                Args: {
                                    &ast.IdentExpr{
                                        Name:      "error",
                                        Namespace: 0,
                                        Source:    nil,
                                        span:      ast.Span{
                                            Start:    ast.Location{Line:2, Column:12},
                                            End:      ast.Location{Line:2, Column:17},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                },
                                OptChain: false,
                                span:     ast.Span{
                                    Start:    ast.Location{Line:2, Column:3},
                                    End:      ast.Location{Line:2, Column:18},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:2, Column:3},
                                End:      ast.Location{Line:2, Column:18},
                                SourceID: 0,
                            },
                        },
                        &ast.ExprStmt{
                            Expr: &ast.LiteralExpr{
                                Lit: &ast.StrLit{
                                    Value: "Failed",
                                    span:  ast.Span{
                                        Start:    ast.Location{Line:3, Column:3},
                                        End:      ast.Location{Line:3, Column:11},
                                        SourceID: 0,
                                    },
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:3, Column:3},
                                    End:      ast.Location{Line:3, Column:11},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:3, Column:3},
                                End:      ast.Location{Line:3, Column:11},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:45},
                        End:      ast.Location{Line:4, Column:2},
                        SourceID: 0,
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:35},
                End:      ast.Location{Line:4, Column:2},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:4, Column:2},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryMissingOpeningBrace - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
    },
    Catch: nil,
    span:  ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:12},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryCatchMissingOpeningBrace - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: nil,
    span:  ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryMissingBlock - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
    },
    Catch: nil,
    span:  ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:4},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryMissingOpeningBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/TryCatchMissingBody - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:34},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:38},
                        End:      ast.Location{Line:1, Column:39},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:39},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:39},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryCatchMissingOpeningBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:27},
            End:      ast.Location{Line:1, Column:32},
            SourceID: 0,
        },
        Message: "Expected { but got identifier",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:33},
            End:      ast.Location{Line:1, Column:35},
            SourceID: 0,
        },
        Message: "Expected a pattern",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:33},
            End:      ast.Location{Line:1, Column:35},
            SourceID: 0,
        },
        Message: "Expected pattern in match case",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:33},
            End:      ast.Location{Line:1, Column:35},
            SourceID: 0,
        },
        Message: "Expected } but got =>",
    },
}
---

[TestParseExprErrorHandling/TryCatchIncompleteGuard - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:34},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: &ast.LiteralExpr{
                Lit: &ast.StrLit{
                    Value: "failed",
                    span:  ast.Span{
                        Start:    ast.Location{Line:1, Column:41},
                        End:      ast.Location{Line:1, Column:49},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:41},
                    End:      ast.Location{Line:1, Column:49},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Body: ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:51},
                        End:      ast.Location{Line:1, Column:51},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:51},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:51},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryCatchMissingBody - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:38},
            End:      ast.Location{Line:1, Column:39},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/TryFinallyMissingOpeningBrace - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch:   nil,
    Finally: &ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:36},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:36},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryFinallyMissingBlock - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch:   nil,
    Finally: &ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:28},
            End:      ast.Location{Line:1, Column:28},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:28},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryCatchMissingPattern - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: nil,
    span:  ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:20},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryFinallyMissingOpeningBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:36},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/TryCatchMissingClosingBrace - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:34},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.IdentExpr{
                    Name:      "error",
                    Namespace: 0,
                    Source:    nil,
                    span:      ast.Span{
                        Start:    ast.Location{Line:1, Column:38},
                        End:      ast.Location{Line:1, Column:43},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:43},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:43},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryFinallyMissingBlock - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:28},
            End:      ast.Location{Line:1, Column:28},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/TryMissingBlock - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/TryCatchIncompleteGuard - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:38},
            End:      ast.Location{Line:1, Column:40},
            SourceID: 0,
        },
        Message: "Unexpected token, '=>'",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:50},
            End:      ast.Location{Line:1, Column:51},
            SourceID: 0,
        },
        Message: "Expected => but got }",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:51},
            End:      ast.Location{Line:1, Column:51},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:51},
            End:      ast.Location{Line:1, Column:51},
            SourceID: 0,
        },
        Message: "Expected } but got ",
    },
}
---

[TestParseExprErrorHandling/TryCatchMissingPattern - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:31},
            SourceID: 0,
        },
        Message: "Expected a pattern",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:31},
            SourceID: 0,
        },
        Message: "Expected pattern in match case",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:29},
            End:      ast.Location{Line:1, Column:31},
            SourceID: 0,
        },
        Message: "Expected } but got =>",
    },
}
---

[TestParseExprErrorHandling/TryCatchMissingArrow - 1]
&ast.TryCatchExpr{
    Try: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.CallExpr{
                    Callee: &ast.IdentExpr{
                        Name:      "operation",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:7},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Args: {
                    },
                    OptChain: false,
                    span:     ast.Span{
                        Start:    ast.Location{Line:1, Column:7},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:18},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:20},
            SourceID: 0,
        },
    },
    Catch: {
        &ast.MatchCase{
            Pattern: &ast.IdentPat{
                Name:    "error",
                TypeAnn: nil,
                Default: nil,
                span:    ast.Span{
                    Start:    ast.Location{Line:1, Column:29},
                    End:      ast.Location{Line:1, Column:34},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Guard: nil,
            Body:  ast.BlockOrExpr{
                Block: (*ast.Block)(nil),
                Expr:  &ast.EmptyExpr{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:44},
                        End:      ast.Location{Line:1, Column:45},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:45},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:45},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/TryCatchMissingClosingBrace - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:43},
            End:      ast.Location{Line:1, Column:43},
            SourceID: 0,
        },
        Message: "Expected } but got ",
    },
}
---

[TestParseExprErrorHandling/TryCatchMissingArrow - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:35},
            End:      ast.Location{Line:1, Column:43},
            SourceID: 0,
        },
        Message: "Expected => but got string",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:44},
            End:      ast.Location{Line:1, Column:45},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprNoErrors/FuncExprWithReturnType - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: &ast.NumberTypeAnn{
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:20},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Throws: nil,
        Async:  false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:      "a",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:23},
                            End:      ast.Location{Line:1, Column:24},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:27},
                            End:      ast.Location{Line:1, Column:28},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:23},
                        End:      ast.Location{Line:1, Column:28},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:23},
                    End:      ast.Location{Line:1, Column:28},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:21},
            End:      ast.Location{Line:1, Column:30},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:30},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExprWithThrowsOnly - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
        },
        Return: nil,
        Throws: nil,
    },
    Body: ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExprWithThrows - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:6},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:9},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: &ast.NumberTypeAnn{
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:20},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Throws: &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "Error",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:28},
                    End:      ast.Location{Line:1, Column:33},
                    SourceID: 0,
                },
            },
            TypeArgs: {
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:28},
                End:      ast.Location{Line:1, Column:33},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Async: false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:      "a",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:36},
                            End:      ast.Location{Line:1, Column:37},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:      "b",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:40},
                            End:      ast.Location{Line:1, Column:41},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:36},
                        End:      ast.Location{Line:1, Column:41},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:36},
                    End:      ast.Location{Line:1, Column:41},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:34},
            End:      ast.Location{Line:1, Column:43},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:43},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ThrowExpression - 1]
&ast.ThrowExpr{
    Arg: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name:      "computeError",
            Namespace: 0,
            Source:    nil,
            span:      ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:19},
                SourceID: 0,
            },
            inferredType: nil,
        },
        Args: {
        },
        OptChain: false,
        span:     ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:21},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ThrowVariable - 1]
&ast.ThrowExpr{
    Arg: &ast.IdentExpr{
        Name:      "error",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:12},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:12},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ThrowWithMessage - 1]
&ast.ThrowExpr{
    Arg: &ast.IdentExpr{
        Name:      "new",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ThrowBasic - 1]
&ast.ThrowExpr{
    Arg: &ast.IdentExpr{
        Name:      "new",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ThrowIncompleteExpression - 1]
&ast.ThrowExpr{
    Arg: &ast.IdentExpr{
        Name:      "new",
        Namespace: 0,
        Source:    nil,
        span:      ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ThrowIncompleteExpression - 2]
[]*parser.Error{
}
---

[TestParseExprErrorHandling/ThrowMissingExpression - 1]
&ast.ThrowExpr{
    Arg: &ast.EmptyExpr{
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:6},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ThrowMissingExpression - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:6},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprNoErrors/ThrowStringLiteral - 1]
&ast.ThrowExpr{
    Arg: &ast.LiteralExpr{
        Lit: &ast.StrLit{
            Value: "divide by zero",
            span:  ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:23},
                SourceID: 0,
            },
        },
        span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:23},
            SourceID: 0,
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:23},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExprReturnIfElse - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "value",
                    TypeAnn: nil,
                    Default: nil,
                    span:    ast.Span{
                        Start:    ast.Location{Line:1, Column:5},
                        End:      ast.Location{Line:1, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  &ast.StringTypeAnn{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:12},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
        },
        Return: nil,
        Throws: nil,
        Async:  false,
    },
    Body: &ast.Block{
        Stmts: {
            &ast.ReturnStmt{
                Expr: &ast.IfElseExpr{
                    Cond: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "value",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:32},
                                End:      ast.Location{Line:1, Column:37},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "!=",
                        Right: &ast.LiteralExpr{
                            Lit: &ast.StrLit{
                                Value: "",
                                span:  ast.Span{
                                    Start:    ast.Location{Line:1, Column:41},
                                    End:      ast.Location{Line:1, Column:43},
                                    SourceID: 0,
                                },
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:41},
                                End:      ast.Location{Line:1, Column:43},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:32},
                            End:      ast.Location{Line:1, Column:43},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Cons: ast.Block{
                        Stmts: {
                            &ast.ExprStmt{
                                Expr: &ast.IdentExpr{
                                    Name:      "value",
                                    Namespace: 0,
                                    Source:    nil,
                                    span:      ast.Span{
                                        Start:    ast.Location{Line:1, Column:46},
                                        End:      ast.Location{Line:1, Column:51},
                                        SourceID: 0,
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:46},
                                    End:      ast.Location{Line:1, Column:51},
                                    SourceID: 0,
                                },
                            },
                        },
                        Span: ast.Span{
                            Start:    ast.Location{Line:1, Column:44},
                            End:      ast.Location{Line:1, Column:53},
                            SourceID: 0,
                        },
                    },
                    Alt: &ast.BlockOrExpr{
                        Block: &ast.Block{
                            Stmts: {
                                &ast.ExprStmt{
                                    Expr: &ast.LiteralExpr{
                                        Lit:  &!%v(DEPTH EXCEEDED),
                                        span: ast.Span{
                                            Start:    ast.Location{Line:1, Column:61},
                                            End:      ast.Location{Line:1, Column:77},
                                            SourceID: 0,
                                        },
                                        inferredType: nil,
                                    },
                                    span: ast.Span{
                                        Start:    ast.Location{Line:1, Column:61},
                                        End:      ast.Location{Line:1, Column:77},
                                        SourceID: 0,
                                    },
                                },
                            },
                            Span: ast.Span{
                                Start:    ast.Location{Line:1, Column:59},
                                End:      ast.Location{Line:1, Column:79},
                                SourceID: 0,
                            },
                        },
                        Expr: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:28},
                        End:      ast.Location{Line:1, Column:79},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:22},
                    End:      ast.Location{Line:1, Column:79},
                    SourceID: 0,
                },
            },
        },
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:20},
            End:      ast.Location{Line:1, Column:81},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:81},
        SourceID: 0,
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ObjectWithStaticMethod - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.MethodExpr{
            Name: &ast.IdentExpr{
                Name:      "foo",
                Namespace: 0,
                Source:    nil,
                span:      ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:6},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                    },
                    Return: nil,
                    Throws: nil,
                    Async:  false,
                },
                Body: &ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.LiteralExpr{
                                Lit: &ast.NumLit{
                                    Value: 5,
                                    span:  ast.Span{
                                        Start:    ast.Location{Line:1, Column:18},
                                        End:      ast.Location{Line:1, Column:19},
                                        SourceID: 0,
                                    },
                                },
                                span: ast.Span{
                                    Start:    ast.Location{Line:1, Column:18},
                                    End:      ast.Location{Line:1, Column:19},
                                    SourceID: 0,
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:11},
                                End:      ast.Location{Line:1, Column:19},
                                SourceID: 0,
                            },
                        },
                    },
                    Span: ast.Span{
                        Start:    ast.Location{Line:1, Column:9},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:3},
                    End:      ast.Location{Line:1, Column:21},
                    SourceID: 0,
                },
                inferredType: nil,
            },
            MutSelf: (*bool)(nil),
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:3},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:23},
        SourceID: 0,
    },
    inferredType: nil,
}
---
