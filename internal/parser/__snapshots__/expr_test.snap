
[TestParseExprErrorHandling/IfElseMissingCondition - 1]
&ast.IfElseExpr{
    Cond: nil,
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:   "a",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:7},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:6},
                    End:   ast.Location{Line:1, Column:7},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:9},
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.IdentExpr{
                        Name:   "b",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:17},
                            End:   ast.Location{Line:1, Column:18},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:17},
                        End:   ast.Location{Line:1, Column:18},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:15},
                End:   ast.Location{Line:1, Column:20},
            },
        },
        Expr: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:20},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IfElseMissingCondition - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a condition",
    },
}
---

[TestParseExprErrorHandling/IfElseMissingOpeningBraces - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:   "cond",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
    },
    Alt:  (*ast.BlockOrExpr)(nil),
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.EmptyExpr{
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "bar",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 1,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 2,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 3,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteCall - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        Message: "Expected ] but got )",
    },
}
---

[TestParseExprErrorHandling/MismatchedParens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IfElseMissingOpeningBraces - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedParens - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:11},
            End:   ast.Location{Line:1, Column:12},
        },
        Message: "Expected ) but got ]",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    "-",
        Right: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.EmptyExpr{
        span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "foo",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:5},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteTaggedTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
    },
    Body: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:   "a",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:12},
                            End:   ast.Location{Line:1, Column:13},
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:   "b",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:17},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:17},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:17},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:19},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:19},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name:   "bar",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMember - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Unexpected token, '*'",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseExprErrorHandling/IncompleteMember - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "expected an identifier after .",
    },
}
---

[TestParseExprErrorHandling/IncompleteTemplateLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing backtick",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingClosingParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:11},
        },
        Message: "Expected ) but got {",
    },
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:5},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
    },
    Body: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:   "a",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:12},
                            End:   ast.Location{Line:1, Column:13},
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:   "b",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:17},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:17},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:17},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:19},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:19},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:8},
            },
        },
        OptChain: true,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ParamsMissingOpeningParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected ( but got identifier",
    },
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "expected an identifier after ?.",
    },
}
---

[TestParseExprErrorHandling/IncompleteElse - 1]
&ast.IfElseExpr{
    Cond: nil,
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:   "a",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:7},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:6},
                    End:   ast.Location{Line:1, Column:7},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:9},
        },
    },
    Alt:  (*ast.BlockOrExpr)(nil),
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/IncompleteElse - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a condition",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:14},
            End:   ast.Location{Line:1, Column:14},
        },
        Message: "Expected an if or an opening brace",
    },
}
---

[TestParseExprNoErrors/ObjectWithMethods - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.MethodExpr{
            Name: &ast.IdentExpr{
                Name:   "foo",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:3},
                    End:   ast.Location{Line:1, Column:6},
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                        &ast.Param{
                            Pattern: &ast.IdentPat{
                                Name:    "self",
                                Default: nil,
                                span:    ast.Span{
                                    Start: ast.Location{Line:1, Column:7},
                                    End:   ast.Location{Line:1, Column:11},
                                },
                                inferredType: nil,
                            },
                            Optional: false,
                            TypeAnn:  nil,
                        },
                    },
                    Return: nil,
                    Throws: nil,
                },
                Body: ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.LiteralExpr{
                                Lit: &ast.NumLit{
                                    Value: 5,
                                    span:  ast.Span{
                                        Start: ast.Location{Line:1, Column:22},
                                        End:   ast.Location{Line:1, Column:23},
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:22},
                                    End:   ast.Location{Line:1, Column:23},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:15},
                                End:   ast.Location{Line:1, Column:23},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:25},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:3},
                    End:   ast.Location{Line:1, Column:25},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        &ast.GetterExpr{
            Name: &ast.IdentExpr{
                Name:   "bar",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:31},
                    End:   ast.Location{Line:1, Column:34},
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                        &ast.Param{
                            Pattern: &ast.IdentPat{
                                Name:    "self",
                                Default: nil,
                                span:    ast.Span{
                                    Start: ast.Location{Line:1, Column:35},
                                    End:   ast.Location{Line:1, Column:39},
                                },
                                inferredType: nil,
                            },
                            Optional: false,
                            TypeAnn:  nil,
                        },
                    },
                    Return: nil,
                    Throws: nil,
                },
                Body: ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.MemberExpr{
                                Object: &ast.IdentExpr{
                                    Name:   "self",
                                    Source: nil,
                                    span:   ast.Span{
                                        Start: ast.Location{Line:1, Column:50},
                                        End:   ast.Location{Line:1, Column:54},
                                    },
                                    inferredType: nil,
                                },
                                Prop: &ast.Ident{
                                    Name: "x",
                                    span: ast.Span{
                                        Start: ast.Location{Line:1, Column:55},
                                        End:   ast.Location{Line:1, Column:56},
                                    },
                                },
                                OptChain: false,
                                span:     ast.Span{
                                    Start: ast.Location{Line:1, Column:50},
                                    End:   ast.Location{Line:1, Column:56},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:43},
                                End:   ast.Location{Line:1, Column:56},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:1, Column:41},
                        End:   ast.Location{Line:1, Column:58},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:31},
                    End:   ast.Location{Line:1, Column:58},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:31},
                End:   ast.Location{Line:1, Column:35},
            },
        },
        &ast.SetterExpr{
            Name: &ast.IdentExpr{
                Name:   "bar",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:64},
                    End:   ast.Location{Line:1, Column:67},
                },
                inferredType: nil,
            },
            Fn: &ast.FuncExpr{
                FuncSig: ast.FuncSig{
                    TypeParams: {
                    },
                    Params: {
                        &ast.Param{
                            Pattern: &ast.IdentPat{
                                Name:    "x",
                                Default: nil,
                                span:    ast.Span{
                                    Start: ast.Location{Line:1, Column:68},
                                    End:   ast.Location{Line:1, Column:69},
                                },
                                inferredType: nil,
                            },
                            Optional: false,
                            TypeAnn:  nil,
                        },
                    },
                    Return: nil,
                    Throws: nil,
                },
                Body: ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.BinaryExpr{
                                Left: &ast.MemberExpr{
                                    Object: &ast.IdentExpr{
                                        Name:   "this",
                                        Source: nil,
                                        span:   ast.Span{
                                            Start: ast.Location{Line:1, Column:73},
                                            End:   ast.Location{Line:1, Column:77},
                                        },
                                        inferredType: nil,
                                    },
                                    Prop: &ast.Ident{
                                        Name: "x",
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:78},
                                            End:   ast.Location{Line:1, Column:79},
                                        },
                                    },
                                    OptChain: false,
                                    span:     ast.Span{
                                        Start: ast.Location{Line:1, Column:73},
                                        End:   ast.Location{Line:1, Column:79},
                                    },
                                    inferredType: nil,
                                },
                                Op:    "=",
                                Right: &ast.IdentExpr{
                                    Name:   "x",
                                    Source: nil,
                                    span:   ast.Span{
                                        Start: ast.Location{Line:1, Column:82},
                                        End:   ast.Location{Line:1, Column:83},
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:73},
                                    End:   ast.Location{Line:1, Column:83},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:73},
                                End:   ast.Location{Line:1, Column:83},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:1, Column:71},
                        End:   ast.Location{Line:1, Column:85},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:64},
                    End:   ast.Location{Line:1, Column:85},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:64},
                End:   ast.Location{Line:1, Column:68},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:87},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Call - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:12},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralTrailingDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 1,
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:3},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Index - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "base",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:   "offset",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:16},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:3},
            End:   ast.Location{Line:1, Column:16},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/UnaryOps - 1]
&ast.BinaryExpr{
    Left: &ast.UnaryExpr{
        Op:  0,
        Arg: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:3},
        },
        inferredType: nil,
    },
    Op:    "-",
    Right: &ast.UnaryExpr{
        Op:  1,
        Arg: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringMultipleLines - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello\nworld",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:2, Column:7},
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:2, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TaggedTemplateStringLiteral - 1]
&ast.TaggedTemplateLitExpr{
    Tag: &ast.IdentExpr{
        Name:   "gql",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Quasis: {
        &ast.Quasi{
            Value: "query userId { user { id } }",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:34},
            },
        },
    },
    Exprs: {
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:34},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ArrayLiteral - 1]
&ast.TupleExpr{
    Elems: {
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 1,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 2,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 3,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/EmptyObject - 1]
&ast.ObjectExpr{
    Elems: {
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Member - 1]
&ast.MemberExpr{
    Object: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Prop: &ast.Ident{
        Name: "c",
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Parens - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/StringLiteral - 1]
&ast.LiteralExpr{
    Lit: &ast.StrLit{
        Value: "hello",
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:8},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IndexPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:9},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IfElse - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:   "cond",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:   "a",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:12},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:11},
                    End:   ast.Location{Line:1, Column:12},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:14},
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.IdentExpr{
                        Name:   "b",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:22},
                            End:   ast.Location{Line:1, Column:23},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:22},
                        End:   ast.Location{Line:1, Column:23},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:20},
                End:   ast.Location{Line:1, Column:25},
            },
        },
        Expr: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:25},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/SingleUnaryOp - 1]
&ast.UnaryExpr{
    Op:  1,
    Arg: &ast.LiteralExpr{
        Lit: &ast.NumLit{
            Value: 5,
            span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:2},
            End:   ast.Location{Line:1, Column:3},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NestedTemplateStringLiteral - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:14},
                End:   ast.Location{Line:1, Column:16},
            },
        },
    },
    Exprs: {
        &ast.TemplateLitExpr{
            Quasis: {
                &ast.Quasi{
                    Value: "b",
                    Span:  ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
                &ast.Quasi{
                    Value: "d",
                    Span:  ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:13},
                    },
                },
            },
            Exprs: {
                &ast.IdentExpr{
                    Name:   "c",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:13},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:16},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/IfElseChaining - 1]
&ast.IfElseExpr{
    Cond: &ast.IdentExpr{
        Name:   "cond1",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:9},
        },
        inferredType: nil,
    },
    Cons: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.IdentExpr{
                    Name:   "a",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:13},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:12},
                    End:   ast.Location{Line:1, Column:13},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:15},
        },
    },
    Alt: &ast.BlockOrExpr{
        Block: (*ast.Block)(nil),
        Expr:  &ast.IfElseExpr{
            Cond: &ast.IdentExpr{
                Name:   "cond2",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:24},
                    End:   ast.Location{Line:1, Column:29},
                },
                inferredType: nil,
            },
            Cons: ast.Block{
                Stmts: {
                    &ast.ExprStmt{
                        Expr: &ast.IdentExpr{
                            Name:   "b",
                            Source: nil,
                            span:   ast.Span{
                                Start: ast.Location{Line:1, Column:32},
                                End:   ast.Location{Line:1, Column:33},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:32},
                            End:   ast.Location{Line:1, Column:33},
                        },
                    },
                },
                Span: ast.Span{
                    Start: ast.Location{Line:1, Column:30},
                    End:   ast.Location{Line:1, Column:35},
                },
            },
            Alt: &ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.ExprStmt{
                            Expr: &ast.IdentExpr{
                                Name:   "c",
                                Source: nil,
                                span:   ast.Span{
                                    Start: ast.Location{Line:1, Column:43},
                                    End:   ast.Location{Line:1, Column:44},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:43},
                                End:   ast.Location{Line:1, Column:44},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:1, Column:41},
                        End:   ast.Location{Line:1, Column:46},
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:20},
                End:   ast.Location{Line:1, Column:46},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:46},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteral - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 5,
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:2},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/AddSub - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    "-",
        Right: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:   "c",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 1.5,
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:4},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CurriedCall - 1]
&ast.CallExpr{
    Callee: &ast.CallExpr{
        Callee: &ast.CallExpr{
            Callee: &ast.IdentExpr{
                Name:   "foo",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:1},
                    End:   ast.Location{Line:1, Column:4},
                },
                inferredType: nil,
            },
            Args: {
                &ast.IdentExpr{
                    Name:   "a",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                    inferredType: nil,
                },
            },
            OptChain: false,
            span:     ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name:   "b",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:12},
            },
            inferredType: nil,
        },
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainIndex - 1]
&ast.IndexExpr{
    Object: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Index: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "base",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        Op:    "+",
        Right: &ast.IdentExpr{
            Name:   "offset",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:17},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:17},
        },
        inferredType: nil,
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:18},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulDiv - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    "/",
        Right: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    "*",
    Right: &ast.IdentExpr{
        Name:   "c",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MulAdd - 1]
&ast.BinaryExpr{
    Left: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Op:    "*",
        Right: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.BinaryExpr{
        Left: &ast.IdentExpr{
            Name:   "c",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
        Op:    "*",
        Right: &ast.IdentExpr{
            Name:   "d",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:13},
                End:   ast.Location{Line:1, Column:14},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:1, Column:9},
            End:   ast.Location{Line:1, Column:14},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "hello ",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:10},
            },
        },
        &ast.Quasi{
            Value: "",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:15},
                End:   ast.Location{Line:1, Column:16},
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name:   "name",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:14},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:16},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MemberPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.MemberExpr{
        Object: &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        Prop: &ast.Ident{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:8},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/CallPrecedence - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name:   "foo",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        Args: {
            &ast.IdentExpr{
                Name:   "b",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:9},
                    End:   ast.Location{Line:1, Column:10},
                },
                inferredType: nil,
            },
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:11},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/TemplateStringLiteralWithMultipleExprs - 1]
&ast.TemplateLitExpr{
    Quasis: {
        &ast.Quasi{
            Value: "a",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        &ast.Quasi{
            Value: "c",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:10},
            },
        },
        &ast.Quasi{
            Value: "e",
            Span:  ast.Span{
                Start: ast.Location{Line:1, Column:12},
                End:   ast.Location{Line:1, Column:14},
            },
        },
    },
    Exprs: {
        &ast.IdentExpr{
            Name:   "b",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
            inferredType: nil,
        },
        &ast.IdentExpr{
            Name:   "d",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:11},
            },
            inferredType: nil,
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Addition - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "+",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/OptChainCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
        &ast.IdentExpr{
            Name:   "bar",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:9},
            },
            inferredType: nil,
        },
    },
    OptChain: true,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NumberLiteralLeadingDecimal - 1]
&ast.LiteralExpr{
    Lit: &ast.NumLit{
        Value: 0.5,
        span:  ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:3},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/MultipleIndexes - 1]
&ast.IndexExpr{
    Object: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name:   "a",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
            inferredType: nil,
        },
        Index: &ast.IdentExpr{
            Name:   "i",
            Source: nil,
            span:   ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:4},
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:5},
        },
        inferredType: nil,
    },
    Index: &ast.IdentExpr{
        Name:   "j",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncExpr - 1]
&ast.FuncExpr{
    FuncSig: ast.FuncSig{
        TypeParams: {
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "a",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name:    "b",
                    Default: nil,
                    span:    ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                    inferredType: nil,
                },
                Optional: false,
                TypeAnn:  nil,
            },
        },
        Return: nil,
        Throws: nil,
    },
    Body: ast.Block{
        Stmts: {
            &ast.ExprStmt{
                Expr: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name:   "a",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:13},
                            End:   ast.Location{Line:1, Column:14},
                        },
                        inferredType: nil,
                    },
                    Op:    "+",
                    Right: &ast.IdentExpr{
                        Name:   "b",
                        Source: nil,
                        span:   ast.Span{
                            Start: ast.Location{Line:1, Column:17},
                            End:   ast.Location{Line:1, Column:18},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:18},
                    },
                    inferredType: nil,
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:13},
                    End:   ast.Location{Line:1, Column:18},
                },
            },
        },
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:11},
            End:   ast.Location{Line:1, Column:20},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:20},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/BasicObject - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.NumLit{
                Value: 0,
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:3},
                    End:   ast.Location{Line:1, Column:4},
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.StrLit{
                    Value: "hello",
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:13},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:6},
                    End:   ast.Location{Line:1, Column:13},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:13},
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "foo",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:15},
                    End:   ast.Location{Line:1, Column:18},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:20},
                        End:   ast.Location{Line:1, Column:21},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:20},
                    End:   ast.Location{Line:1, Column:21},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:15},
                End:   ast.Location{Line:1, Column:21},
            },
        },
        &ast.PropertyExpr{
            Name: &ast.StrLit{
                Value: "bar",
                span:  ast.Span{
                    Start: ast.Location{Line:1, Column:23},
                    End:   ast.Location{Line:1, Column:28},
                },
            },
            Optional: true,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.BoolLit{
                    Value: true,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:31},
                        End:   ast.Location{Line:1, Column:35},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:31},
                    End:   ast.Location{Line:1, Column:35},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:23},
                End:   ast.Location{Line:1, Column:35},
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "baz",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:37},
                    End:   ast.Location{Line:1, Column:40},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    nil,
            span:     ast.Span{
                Start: ast.Location{Line:1, Column:37},
                End:   ast.Location{Line:1, Column:40},
            },
        },
        &ast.PropertyExpr{
            Name: &ast.ComputedKey{
                Expr: &ast.IdentExpr{
                    Name:   "qux",
                    Source: nil,
                    span:   ast.Span{
                        Start: ast.Location{Line:1, Column:43},
                        End:   ast.Location{Line:1, Column:46},
                    },
                    inferredType: nil,
                },
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.BoolLit{
                    Value: false,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:49},
                        End:   ast.Location{Line:1, Column:54},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:49},
                    End:   ast.Location{Line:1, Column:54},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:43},
                End:   ast.Location{Line:1, Column:54},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:56},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingComma - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "foo",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:3},
                    End:   ast.Location{Line:1, Column:6},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:9},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingComma - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:10},
            End:   ast.Location{Line:1, Column:13},
        },
        Message: "Expected } but got identifier",
    },
}
---

[TestParseExprErrorHandling/ObjectMissingColon - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "foo",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:3},
                    End:   ast.Location{Line:1, Column:6},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 5,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:7},
                    End:   ast.Location{Line:1, Column:8},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "bar",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:10},
                    End:   ast.Location{Line:1, Column:13},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    &ast.LiteralExpr{
                Lit: &ast.NumLit{
                    Value: 10,
                    span:  ast.Span{
                        Start: ast.Location{Line:1, Column:15},
                        End:   ast.Location{Line:1, Column:17},
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:15},
                    End:   ast.Location{Line:1, Column:17},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:1, Column:17},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:19},
    },
    inferredType: nil,
}
---

[TestParseExprErrorHandling/ObjectMissingColon - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected a comma or closing brace",
    },
}
---

[TestParseExprNoErrors/LessThanEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "<=",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/GreaterThan - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    ">",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/GreaterThanEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    ">=",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/LessThan - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "<",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/NotEqual - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "!=",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/Equal - 1]
&ast.BinaryExpr{
    Left: &ast.IdentExpr{
        Name:   "a",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        inferredType: nil,
    },
    Op:    "==",
    Right: &ast.IdentExpr{
        Name:   "b",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/FuncCall - 1]
&ast.CallExpr{
    Callee: &ast.IdentExpr{
        Name:   "foo",
        Source: nil,
        span:   ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:4},
        },
        inferredType: nil,
    },
    Args: {
    },
    OptChain: false,
    span:     ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
    inferredType: nil,
}
---

[TestParseExprNoErrors/ObjectWithSpreads - 1]
&ast.ObjectExpr{
    Elems: {
        &ast.PropertyExpr{
            Name: &ast.IdentExpr{
                Name:   "a",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
                inferredType: nil,
            },
            Optional: false,
            Readonly: false,
            Value:    nil,
            span:     ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
        },
        &ast.RestSpreadExpr{
            Value: &ast.IdentExpr{
                Name:   "b",
                Source: nil,
                span:   ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:9},
            },
        },
        &ast.RestSpreadExpr{
            Value: &ast.ObjectExpr{
                Elems: {
                    &ast.PropertyExpr{
                        Name: &ast.IdentExpr{
                            Name:   "c",
                            Source: nil,
                            span:   ast.Span{
                                Start: ast.Location{Line:1, Column:15},
                                End:   ast.Location{Line:1, Column:16},
                            },
                            inferredType: nil,
                        },
                        Optional: false,
                        Readonly: false,
                        Value:    nil,
                        span:     ast.Span{
                            Start: ast.Location{Line:1, Column:15},
                            End:   ast.Location{Line:1, Column:16},
                        },
                    },
                    &ast.PropertyExpr{
                        Name: &ast.IdentExpr{
                            Name:   "d",
                            Source: nil,
                            span:   ast.Span{
                                Start: ast.Location{Line:1, Column:18},
                                End:   ast.Location{Line:1, Column:19},
                            },
                            inferredType: nil,
                        },
                        Optional: false,
                        Readonly: false,
                        Value:    nil,
                        span:     ast.Span{
                            Start: ast.Location{Line:1, Column:18},
                            End:   ast.Location{Line:1, Column:19},
                        },
                    },
                },
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:14},
                    End:   ast.Location{Line:1, Column:20},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:20},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:21},
    },
    inferredType: nil,
}
---
