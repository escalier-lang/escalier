
[TestParsingAddition - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"b"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:6},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:6},
    },
}
---

[TestParsingAddSub - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Op:    1,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"c"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:9},
                End:   parser.Location{Line:1, Column:10},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:10},
    },
}
---

[TestParsingMulAdd - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Op:    2,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"c"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:9},
                        End:   parser.Location{Line:1, Column:10},
                    },
                },
                Op:    2,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"d"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:13},
                        End:   parser.Location{Line:1, Column:14},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:9},
                End:   parser.Location{Line:1, Column:14},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:14},
    },
}
---

[TestParsingUnaryOps - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EUnary{
                Op:  0,
                Arg: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:2},
                        End:   parser.Location{Line:1, Column:3},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:2},
                End:   parser.Location{Line:1, Column:3},
            },
        },
        Op:    1,
        Right: &parser.Expr{
            Kind: &parser.EUnary{
                Op:  1,
                Arg: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:7},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:7},
                End:   parser.Location{Line:1, Column:8},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:2},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingParens - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    2,
        Right: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:6},
                        End:   parser.Location{Line:1, Column:7},
                    },
                },
                Op:    0,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"c"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:10},
                        End:   parser.Location{Line:1, Column:11},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:6},
                End:   parser.Location{Line:1, Column:11},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:11},
    },
}
---

[TestParsingIndex - 1]
&parser.Expr{
    Kind: &parser.EIndex{
        Object: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Index: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"base"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:3},
                        End:   parser.Location{Line:1, Column:7},
                    },
                },
                Op:    0,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"offset"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:10},
                        End:   parser.Location{Line:1, Column:16},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:3},
                End:   parser.Location{Line:1, Column:16},
            },
        },
        OptChain: false,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:17},
    },
}
---

[TestParsingOptChainIndex - 1]
&parser.Expr{
    Kind: &parser.EIndex{
        Object: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Index: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"base"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:4},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
                Op:    0,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"offset"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:11},
                        End:   parser.Location{Line:1, Column:17},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:4},
                End:   parser.Location{Line:1, Column:17},
            },
        },
        OptChain: true,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:18},
    },
}
---

[TestParsingCall - 1]
&parser.Expr{
    Kind: &parser.ECall{
        Callee: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"foo"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:4},
            },
        },
        Args: {
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"a"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:5},
                    End:   parser.Location{Line:1, Column:6},
                },
            },
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"b"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:8},
                    End:   parser.Location{Line:1, Column:9},
                },
            },
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"c"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:11},
                    End:   parser.Location{Line:1, Column:12},
                },
            },
        },
        OptChain: false,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:13},
    },
}
---

[TestParsingArrayLiteral - 1]
&parser.Expr{
    Kind: &parser.EArray{
        Elems: {
            &parser.Expr{
                Kind: &parser.ENumber{Value:1},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:2},
                    End:   parser.Location{Line:1, Column:3},
                },
            },
            &parser.Expr{
                Kind: &parser.ENumber{Value:2},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:5},
                    End:   parser.Location{Line:1, Column:6},
                },
            },
            &parser.Expr{
                Kind: &parser.ENumber{Value:3},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:8},
                    End:   parser.Location{Line:1, Column:9},
                },
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:10},
    },
}
---

[TestParsingCurriedCall - 1]
&parser.Expr{
    Kind: &parser.ECall{
        Callee: &parser.Expr{
            Kind: &parser.ECall{
                Callee: &parser.Expr{
                    Kind: &parser.ECall{
                        Callee: &parser.Expr{
                            Kind: &parser.EIdentifier{Name:"foo"},
                            Span: parser.Span{
                                Start: parser.Location{Line:1, Column:1},
                                End:   parser.Location{Line:1, Column:4},
                            },
                        },
                        Args: {
                            &parser.Expr{
                                Kind: &parser.EIdentifier{Name:"a"},
                                Span: parser.Span{
                                    Start: parser.Location{Line:1, Column:5},
                                    End:   parser.Location{Line:1, Column:6},
                                },
                            },
                        },
                        OptChain: false,
                    },
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:7},
                    },
                },
                Args: {
                    &parser.Expr{
                        Kind: &parser.EIdentifier{Name:"b"},
                        Span: parser.Span{
                            Start: parser.Location{Line:1, Column:8},
                            End:   parser.Location{Line:1, Column:9},
                        },
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:10},
            },
        },
        Args: {
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"c"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:11},
                    End:   parser.Location{Line:1, Column:12},
                },
            },
        },
        OptChain: false,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:13},
    },
}
---

[TestParsingMember - 1]
&parser.Expr{
    Kind: &parser.EMember{
        Object: &parser.Expr{
            Kind: &parser.EMember{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Prop: &parser.Identifier{
                    Name: "b",
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:3},
                        End:   parser.Location{Line:1, Column:4},
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:4},
            },
        },
        Prop: &parser.Identifier{
            Name: "c",
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:4},
                End:   parser.Location{Line:1, Column:6},
            },
        },
        OptChain: true,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:6},
    },
}
---

[TestParsingMultipleIndexes - 1]
&parser.Expr{
    Kind: &parser.EIndex{
        Object: &parser.Expr{
            Kind: &parser.EIndex{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Index: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"i"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:3},
                        End:   parser.Location{Line:1, Column:4},
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:5},
            },
        },
        Index: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"j"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:6},
                End:   parser.Location{Line:1, Column:7},
            },
        },
        OptChain: false,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingMulDiv - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Op:    3,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:6},
            },
        },
        Op:    2,
        Right: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"c"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:9},
                End:   parser.Location{Line:1, Column:10},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:10},
    },
}
---

[TestParsingOptChainCall - 1]
&parser.Expr{
    Kind: &parser.ECall{
        Callee: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"foo"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:4},
            },
        },
        Args: {
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"bar"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:6},
                    End:   parser.Location{Line:1, Column:9},
                },
            },
        },
        OptChain: true,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:10},
    },
}
---

[TestParsingIncompleteMember - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EMember{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
                Prop: &parser.Identifier{
                    Name: "",
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:7},
                        End:   parser.Location{Line:1, Column:7},
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:7},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:7},
    },
}
---

[TestParsingCallPrecedence - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.ECall{
                Callee: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"foo"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
                Args: {
                    &parser.Expr{
                        Kind: &parser.EIdentifier{Name:"b"},
                        Span: parser.Span{
                            Start: parser.Location{Line:1, Column:9},
                            End:   parser.Location{Line:1, Column:10},
                        },
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:11},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:11},
    },
}
---

[TestParsingMemberPrecedence - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EMember{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
                Prop: &parser.Identifier{
                    Name: "c",
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:7},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:8},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingIndexPrecedence - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EIndex{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
                Index: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"c"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:7},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
                OptChain: false,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:9},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:9},
    },
}
---

[TestParsingIncompleteMember - 2]
&parser.Error{
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:6},
        End:   parser.Location{Line:1, Column:7},
    },
    Message: "expected an identifier after .",
}
---

[TestParsingIncompleteBinaryExpr - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EBinary{
                Left: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"a"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:1},
                        End:   parser.Location{Line:1, Column:2},
                    },
                },
                Op:    1,
                Right: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EIgnore{
                Token: &parser.Token{
                    Data: &parser.TEOF{},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:8},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:8},
                End:   parser.Location{Line:1, Column:8},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingExtraOperatorsInBinaryExpr - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"b"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:7},
                End:   parser.Location{Line:1, Column:8},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingExtraOperatorsInBinaryExpr - 2]
&parser.Error{
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:5},
        End:   parser.Location{Line:1, Column:6},
    },
    Message: "Unexpected token",
}
---

[TestParsingIncompleteBinaryExpr - 2]
&parser.Error{
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:8},
        End:   parser.Location{Line:1, Column:8},
    },
    Message: "Unexpected token",
}
---

[TestParsingIncompleteCall - 1]
&parser.Expr{
    Kind: &parser.ECall{
        Callee: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"foo"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:4},
            },
        },
        Args: {
            &parser.Expr{
                Kind: &parser.EIdentifier{Name:"a"},
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:5},
                    End:   parser.Location{Line:1, Column:6},
                },
            },
            &parser.Expr{
                Kind: &parser.EIgnore{
                    Token: &parser.Token{
                        Data: &parser.TEOF{},
                        Span: parser.Span{
                            Start: parser.Location{Line:1, Column:7},
                            End:   parser.Location{Line:1, Column:7},
                        },
                    },
                },
                Span: parser.Span{
                    Start: parser.Location{Line:1, Column:7},
                    End:   parser.Location{Line:1, Column:7},
                },
            },
        },
        OptChain: false,
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingIncompleteCall - 2]
&parser.Error{
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:7},
        End:   parser.Location{Line:1, Column:7},
    },
    Message: "Unexpected token",
}
---

[TestParsingStringLiteral - 1]
&parser.Expr{
    Kind: &parser.EString{Value:"hello"},
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:7},
    },
}
---

[TestParsingNumberLiteral - 1]
&parser.Expr{
    Kind: &parser.ENumber{Value:5},
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:2},
    },
}
---

[TestParsingIncompleteMemberOptChain - 1]
&parser.Expr{
    Kind: &parser.EBinary{
        Left: &parser.Expr{
            Kind: &parser.EIdentifier{Name:"a"},
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:1},
                End:   parser.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &parser.Expr{
            Kind: &parser.EMember{
                Object: &parser.Expr{
                    Kind: &parser.EIdentifier{Name:"b"},
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:5},
                        End:   parser.Location{Line:1, Column:6},
                    },
                },
                Prop: &parser.Identifier{
                    Name: "",
                    Span: parser.Span{
                        Start: parser.Location{Line:1, Column:8},
                        End:   parser.Location{Line:1, Column:8},
                    },
                },
                OptChain: true,
            },
            Span: parser.Span{
                Start: parser.Location{Line:1, Column:5},
                End:   parser.Location{Line:1, Column:8},
            },
        },
    },
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:1},
        End:   parser.Location{Line:1, Column:8},
    },
}
---

[TestParsingIncompleteMemberOptChain - 2]
&parser.Error{
    Span: parser.Span{
        Start: parser.Location{Line:1, Column:6},
        End:   parser.Location{Line:1, Column:8},
    },
    Message: "expected an identifier after ?.",
}
---
