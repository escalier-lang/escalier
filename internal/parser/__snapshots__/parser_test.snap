
[TestParseModuleNoErrors/ExprStmts - 1]
&ast.ExprStmt{
    Expr: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:8},
            },
            inferredType: nil,
        },
        Args: {
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:2, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:2, Column:10},
    },
}
---

[TestParseModuleNoErrors/VarDecls - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:9},
                End:   ast.Location{Line:2, Column:10},
            },
            inferredType: nil,
        },
        Init: &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start: ast.Location{Line:2, Column:13},
                    End:   ast.Location{Line:2, Column:14},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:13},
                End:   ast.Location{Line:2, Column:14},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:2, Column:14},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:2, Column:14},
    },
}
---

[TestParseModuleNoErrors/FuncDecls - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "add",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:8},
                End:   ast.Location{Line:2, Column:11},
            },
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:12},
                        End:   ast.Location{Line:2, Column:13},
                    },
                    inferredType: nil,
                },
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:15},
                        End:   ast.Location{Line:2, Column:16},
                    },
                    inferredType: nil,
                },
            },
        },
        Body: ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:13},
                                End:   ast.Location{Line:3, Column:14},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:17},
                                End:   ast.Location{Line:3, Column:18},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:3, Column:13},
                            End:   ast.Location{Line:3, Column:18},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:6},
                        End:   ast.Location{Line:3, Column:18},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:2, Column:18},
                End:   ast.Location{Line:4, Column:6},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:4, Column:6},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:4, Column:6},
    },
}
---

[TestParseModuleNoErrors/SplitExprOnNewline - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    1,
        Pattern: &ast.IdentPat{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:9},
                End:   ast.Location{Line:2, Column:10},
            },
            inferredType: nil,
        },
        Init: &ast.IdentExpr{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:13},
                End:   ast.Location{Line:2, Column:14},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:2, Column:14},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:2, Column:14},
    },
}
---

[TestParseModuleNoErrors/MultilineExprInParens - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    1,
        Pattern: &ast.IdentPat{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:9},
                End:   ast.Location{Line:2, Column:10},
            },
            inferredType: nil,
        },
        Init: &ast.BinaryExpr{
            Left: &ast.IdentExpr{
                Name: "x",
                span: ast.Span{
                    Start: ast.Location{Line:2, Column:14},
                    End:   ast.Location{Line:2, Column:15},
                },
                inferredType: nil,
            },
            Op:    1,
            Right: &ast.IdentExpr{
                Name: "y",
                span: ast.Span{
                    Start: ast.Location{Line:3, Column:6},
                    End:   ast.Location{Line:3, Column:7},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:14},
                End:   ast.Location{Line:3, Column:7},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:3, Column:7},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:3, Column:7},
    },
}
---

[TestParseModuleNoErrors/MultilineExprInBrackets - 1]
&ast.ExprStmt{
    Expr: &ast.IndexExpr{
        Object: &ast.IdentExpr{
            Name: "a",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:6},
            },
            inferredType: nil,
        },
        Index: &ast.BinaryExpr{
            Left: &ast.IdentExpr{
                Name: "base",
                span: ast.Span{
                    Start: ast.Location{Line:2, Column:7},
                    End:   ast.Location{Line:2, Column:11},
                },
                inferredType: nil,
            },
            Op:    0,
            Right: &ast.IdentExpr{
                Name: "offset",
                span: ast.Span{
                    Start: ast.Location{Line:3, Column:6},
                    End:   ast.Location{Line:3, Column:12},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:7},
                End:   ast.Location{Line:3, Column:12},
            },
            inferredType: nil,
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:3, Column:13},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:3, Column:13},
    },
}
---

[TestParseModuleNoErrors/SplitExprInNewScope - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name: "funcs",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:9},
                End:   ast.Location{Line:2, Column:14},
            },
            inferredType: nil,
        },
        Init: &ast.TupleExpr{
            Elems: {
                &ast.FuncExpr{
                    Params: {
                    },
                    Return: nil,
                    Throws: nil,
                    Body:   ast.Block{
                        Stmts: {
                            &ast.DeclStmt{
                                Decl: &ast.VarDecl{
                                    Kind:    1,
                                    Pattern: &ast.IdentPat{
                                        Name: "a",
                                        span: ast.Span{
                                            Start: ast.Location{Line:4, Column:11},
                                            End:   ast.Location{Line:4, Column:12},
                                        },
                                        inferredType: nil,
                                    },
                                    Init: &ast.IdentExpr{
                                        Name: "x",
                                        span: ast.Span{
                                            Start: ast.Location{Line:4, Column:15},
                                            End:   ast.Location{Line:4, Column:16},
                                        },
                                        inferredType: nil,
                                    },
                                    export:  false,
                                    declare: false,
                                    span:    ast.Span{
                                        Start: ast.Location{Line:4, Column:7},
                                        End:   ast.Location{Line:4, Column:16},
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:4, Column:7},
                                    End:   ast.Location{Line:4, Column:16},
                                },
                            },
                            &ast.ExprStmt{
                                Expr: &ast.UnaryExpr{
                                    Op:  1,
                                    Arg: &ast.IdentExpr{
                                        Name: "y",
                                        span: ast.Span{
                                            Start: ast.Location{Line:5, Column:8},
                                            End:   ast.Location{Line:5, Column:9},
                                        },
                                        inferredType: nil,
                                    },
                                    span: ast.Span{
                                        Start: ast.Location{Line:5, Column:7},
                                        End:   ast.Location{Line:5, Column:9},
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:5, Column:7},
                                    End:   ast.Location{Line:5, Column:9},
                                },
                            },
                        },
                        Span: ast.Span{
                            Start: ast.Location{Line:3, Column:11},
                            End:   ast.Location{Line:6, Column:7},
                        },
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:6},
                        End:   ast.Location{Line:6, Column:7},
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:17},
                End:   ast.Location{Line:7, Column:6},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:7, Column:6},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:7, Column:6},
    },
}
---

[TestParseModuleNoErrors/ExprStmts - 2]
&ast.ExprStmt{
    Expr: &ast.CallExpr{
        Callee: &ast.IdentExpr{
            Name: "bar",
            span: ast.Span{
                Start: ast.Location{Line:3, Column:5},
                End:   ast.Location{Line:3, Column:8},
            },
            inferredType: nil,
        },
        Args: {
        },
        OptChain: false,
        span:     ast.Span{
            Start: ast.Location{Line:3, Column:5},
            End:   ast.Location{Line:3, Column:10},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:3, Column:5},
        End:   ast.Location{Line:3, Column:10},
    },
}
---

[TestParseModuleNoErrors/SplitExprOnNewline - 2]
&ast.ExprStmt{
    Expr: &ast.UnaryExpr{
        Op:  1,
        Arg: &ast.IdentExpr{
            Name: "y",
            span: ast.Span{
                Start: ast.Location{Line:3, Column:6},
                End:   ast.Location{Line:3, Column:7},
            },
            inferredType: nil,
        },
        span: ast.Span{
            Start: ast.Location{Line:3, Column:5},
            End:   ast.Location{Line:3, Column:7},
        },
        inferredType: nil,
    },
    span: ast.Span{
        Start: ast.Location{Line:3, Column:5},
        End:   ast.Location{Line:3, Column:7},
    },
}
---

[TestParseModuleNoErrors/VarDecls - 2]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name: "b",
            span: ast.Span{
                Start: ast.Location{Line:3, Column:9},
                End:   ast.Location{Line:3, Column:10},
            },
            inferredType: nil,
        },
        Init: &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 10,
                span:  ast.Span{
                    Start: ast.Location{Line:3, Column:13},
                    End:   ast.Location{Line:3, Column:15},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:3, Column:13},
                End:   ast.Location{Line:3, Column:15},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:3, Column:5},
            End:   ast.Location{Line:3, Column:15},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:3, Column:5},
        End:   ast.Location{Line:3, Column:15},
    },
}
---

[TestParseModuleNoErrors/VarDecls - 3]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name: "sum",
            span: ast.Span{
                Start: ast.Location{Line:4, Column:9},
                End:   ast.Location{Line:4, Column:12},
            },
            inferredType: nil,
        },
        Init: &ast.BinaryExpr{
            Left: &ast.IdentExpr{
                Name: "a",
                span: ast.Span{
                    Start: ast.Location{Line:4, Column:15},
                    End:   ast.Location{Line:4, Column:16},
                },
                inferredType: nil,
            },
            Op:    0,
            Right: &ast.IdentExpr{
                Name: "b",
                span: ast.Span{
                    Start: ast.Location{Line:4, Column:19},
                    End:   ast.Location{Line:4, Column:20},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:4, Column:15},
                End:   ast.Location{Line:4, Column:20},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:4, Column:5},
            End:   ast.Location{Line:4, Column:20},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:4, Column:5},
        End:   ast.Location{Line:4, Column:20},
    },
}
---

[TestParseModuleNoErrors/FuncDecls - 2]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "sub",
            span: ast.Span{
                Start: ast.Location{Line:5, Column:8},
                End:   ast.Location{Line:5, Column:11},
            },
        },
        Params: {
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:5, Column:12},
                        End:   ast.Location{Line:5, Column:13},
                    },
                    inferredType: nil,
                },
            },
            &ast.Param{
                Pattern: &ast.IdentPat{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:5, Column:15},
                        End:   ast.Location{Line:5, Column:16},
                    },
                    inferredType: nil,
                },
            },
        },
        Body: ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:6, Column:13},
                                End:   ast.Location{Line:6, Column:14},
                            },
                            inferredType: nil,
                        },
                        Op:    1,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:6, Column:17},
                                End:   ast.Location{Line:6, Column:18},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:6, Column:13},
                            End:   ast.Location{Line:6, Column:18},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:6, Column:6},
                        End:   ast.Location{Line:6, Column:18},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:5, Column:18},
                End:   ast.Location{Line:7, Column:6},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:5, Column:5},
            End:   ast.Location{Line:7, Column:6},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:5, Column:5},
        End:   ast.Location{Line:7, Column:6},
    },
}
---

[TestParseModuleNoErrors/IfElse - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:2, Column:9},
                End:   ast.Location{Line:2, Column:10},
            },
            inferredType: nil,
        },
        Init: &ast.IfElseExpr{
            Cond: &ast.IdentExpr{
                Name: "cond",
                span: ast.Span{
                    Start: ast.Location{Line:2, Column:16},
                    End:   ast.Location{Line:2, Column:20},
                },
                inferredType: nil,
            },
            Cons: ast.Block{
                Stmts: {
                    &ast.DeclStmt{
                        Decl: &ast.VarDecl{
                            Kind:    1,
                            Pattern: &ast.IdentPat{
                                Name: "a",
                                span: ast.Span{
                                    Start: ast.Location{Line:3, Column:10},
                                    End:   ast.Location{Line:3, Column:11},
                                },
                                inferredType: nil,
                            },
                            Init: &ast.LiteralExpr{
                                Lit: &ast.NumLit{
                                    Value: 5,
                                    span:  ast.Span{
                                        Start: ast.Location{Line:3, Column:14},
                                        End:   ast.Location{Line:3, Column:15},
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:3, Column:14},
                                    End:   ast.Location{Line:3, Column:15},
                                },
                                inferredType: nil,
                            },
                            export:  false,
                            declare: false,
                            span:    ast.Span{
                                Start: ast.Location{Line:3, Column:6},
                                End:   ast.Location{Line:3, Column:15},
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:3, Column:6},
                            End:   ast.Location{Line:3, Column:15},
                        },
                    },
                    &ast.ExprStmt{
                        Expr: &ast.UnaryExpr{
                            Op:  1,
                            Arg: &ast.LiteralExpr{
                                Lit: &ast.NumLit{
                                    Value: 10,
                                    span:  ast.Span{
                                        Start: ast.Location{Line:4, Column:7},
                                        End:   ast.Location{Line:4, Column:9},
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:4, Column:7},
                                    End:   ast.Location{Line:4, Column:9},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:6},
                                End:   ast.Location{Line:4, Column:9},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:6},
                            End:   ast.Location{Line:4, Column:9},
                        },
                    },
                },
                Span: ast.Span{
                    Start: ast.Location{Line:2, Column:21},
                    End:   ast.Location{Line:5, Column:6},
                },
            },
            Alt: ast.BlockOrExpr{
                Block: &ast.Block{
                    Stmts: {
                        &ast.DeclStmt{
                            Decl: &ast.VarDecl{
                                Kind:    1,
                                Pattern: &ast.IdentPat{
                                    Name: "b",
                                    span: ast.Span{
                                        Start: ast.Location{Line:6, Column:11},
                                        End:   ast.Location{Line:6, Column:12},
                                    },
                                    inferredType: nil,
                                },
                                Init: &ast.LiteralExpr{
                                    Lit: &ast.NumLit{
                                        Value: 10,
                                        span:  ast.Span{
                                            Start: ast.Location{Line:6, Column:15},
                                            End:   ast.Location{Line:6, Column:17},
                                        },
                                    },
                                    span: ast.Span{
                                        Start: ast.Location{Line:6, Column:15},
                                        End:   ast.Location{Line:6, Column:17},
                                    },
                                    inferredType: nil,
                                },
                                export:  false,
                                declare: false,
                                span:    ast.Span{
                                    Start: ast.Location{Line:6, Column:7},
                                    End:   ast.Location{Line:6, Column:17},
                                },
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:6, Column:7},
                                End:   ast.Location{Line:6, Column:17},
                            },
                        },
                        &ast.ExprStmt{
                            Expr: &ast.UnaryExpr{
                                Op:  1,
                                Arg: &ast.LiteralExpr{
                                    Lit: &ast.NumLit{
                                        Value: 5,
                                        span:  ast.Span{
                                            Start: ast.Location{Line:7, Column:7},
                                            End:   ast.Location{Line:7, Column:8},
                                        },
                                    },
                                    span: ast.Span{
                                        Start: ast.Location{Line:7, Column:7},
                                        End:   ast.Location{Line:7, Column:8},
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:7, Column:6},
                                    End:   ast.Location{Line:7, Column:8},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:7, Column:6},
                                End:   ast.Location{Line:7, Column:8},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:5, Column:12},
                        End:   ast.Location{Line:8, Column:6},
                    },
                },
                Expr: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:12},
                End:   ast.Location{Line:8, Column:6},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:2, Column:5},
            End:   ast.Location{Line:8, Column:6},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:2, Column:5},
        End:   ast.Location{Line:8, Column:6},
    },
}
---
