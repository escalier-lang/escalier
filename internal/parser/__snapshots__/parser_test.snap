
[TestParseModuleNoErrors/ExprStmts - 1]
&ast.Module{
    Stmts: {
        &ast.ExprStmt{
            Expr: &ast.CallExpr{
                Callee: &ast.IdentExpr{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:2, Column:8},
                    },
                    inferredType: nil,
                },
                Args: {
                },
                OptChain: false,
                span:     ast.Span{
                    Start: ast.Location{Line:2, Column:5},
                    End:   ast.Location{Line:2, Column:10},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:10},
            },
        },
        &ast.ExprStmt{
            Expr: &ast.CallExpr{
                Callee: &ast.IdentExpr{
                    Name: "bar",
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:5},
                        End:   ast.Location{Line:3, Column:8},
                    },
                    inferredType: nil,
                },
                Args: {
                },
                OptChain: false,
                span:     ast.Span{
                    Start: ast.Location{Line:3, Column:5},
                    End:   ast.Location{Line:3, Column:10},
                },
                inferredType: nil,
            },
            span: ast.Span{
                Start: ast.Location{Line:3, Column:5},
                End:   ast.Location{Line:3, Column:10},
            },
        },
    },
}
---

[TestParseModuleNoErrors/VarDecls - 1]
&ast.Module{
    Stmts: {
        &ast.DeclStmt{
            Decl: &ast.VarDecl{
                Kind: 0,
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:9},
                        End:   ast.Location{Line:2, Column:10},
                    },
                },
                Init: &ast.LiteralExpr{
                    Lit:  &ast.NumLit{Value:5},
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:13},
                        End:   ast.Location{Line:2, Column:14},
                    },
                    inferredType: nil,
                },
                export:  false,
                declare: false,
                span:    ast.Span{
                    Start: ast.Location{Line:2, Column:5},
                    End:   ast.Location{Line:2, Column:14},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:14},
            },
        },
        &ast.DeclStmt{
            Decl: &ast.VarDecl{
                Kind: 0,
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:9},
                        End:   ast.Location{Line:3, Column:10},
                    },
                },
                Init: &ast.LiteralExpr{
                    Lit:  &ast.NumLit{Value:10},
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:13},
                        End:   ast.Location{Line:3, Column:15},
                    },
                    inferredType: nil,
                },
                export:  false,
                declare: false,
                span:    ast.Span{
                    Start: ast.Location{Line:3, Column:5},
                    End:   ast.Location{Line:3, Column:15},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:3, Column:5},
                End:   ast.Location{Line:3, Column:15},
            },
        },
        &ast.DeclStmt{
            Decl: &ast.VarDecl{
                Kind: 0,
                Name: &ast.Ident{
                    Name: "sum",
                    span: ast.Span{
                        Start: ast.Location{Line:4, Column:9},
                        End:   ast.Location{Line:4, Column:12},
                    },
                },
                Init: &ast.BinaryExpr{
                    Left: &ast.IdentExpr{
                        Name: "a",
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:15},
                            End:   ast.Location{Line:4, Column:16},
                        },
                        inferredType: nil,
                    },
                    Op:    0,
                    Right: &ast.IdentExpr{
                        Name: "b",
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:19},
                            End:   ast.Location{Line:4, Column:20},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:4, Column:15},
                        End:   ast.Location{Line:4, Column:20},
                    },
                    inferredType: nil,
                },
                export:  false,
                declare: false,
                span:    ast.Span{
                    Start: ast.Location{Line:4, Column:5},
                    End:   ast.Location{Line:4, Column:20},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:4, Column:5},
                End:   ast.Location{Line:4, Column:20},
            },
        },
    },
}
---

[TestParseModuleNoErrors/FuncDecls - 1]
&ast.Module{
    Stmts: {
        &ast.DeclStmt{
            Decl: &ast.FuncDecl{
                Name: &ast.Ident{
                    Name: "add",
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:8},
                        End:   ast.Location{Line:2, Column:11},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Ident{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:12},
                                End:   ast.Location{Line:2, Column:13},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Ident{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:15},
                                End:   ast.Location{Line:2, Column:16},
                            },
                        },
                    },
                },
                Body: ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.BinaryExpr{
                                Left: &ast.IdentExpr{
                                    Name: "a",
                                    span: ast.Span{
                                        Start: ast.Location{Line:3, Column:13},
                                        End:   ast.Location{Line:3, Column:14},
                                    },
                                    inferredType: nil,
                                },
                                Op:    0,
                                Right: &ast.IdentExpr{
                                    Name: "b",
                                    span: ast.Span{
                                        Start: ast.Location{Line:3, Column:17},
                                        End:   ast.Location{Line:3, Column:18},
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:3, Column:13},
                                    End:   ast.Location{Line:3, Column:18},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:6},
                                End:   ast.Location{Line:3, Column:18},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:2, Column:18},
                        End:   ast.Location{Line:4, Column:6},
                    },
                },
                export:  false,
                declare: false,
                span:    ast.Span{
                    Start: ast.Location{Line:2, Column:5},
                    End:   ast.Location{Line:4, Column:6},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:4, Column:6},
            },
        },
        &ast.DeclStmt{
            Decl: &ast.FuncDecl{
                Name: &ast.Ident{
                    Name: "sub",
                    span: ast.Span{
                        Start: ast.Location{Line:5, Column:8},
                        End:   ast.Location{Line:5, Column:11},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Ident{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:5, Column:12},
                                End:   ast.Location{Line:5, Column:13},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Ident{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:5, Column:15},
                                End:   ast.Location{Line:5, Column:16},
                            },
                        },
                    },
                },
                Body: ast.Block{
                    Stmts: {
                        &ast.ReturnStmt{
                            Expr: &ast.BinaryExpr{
                                Left: &ast.IdentExpr{
                                    Name: "a",
                                    span: ast.Span{
                                        Start: ast.Location{Line:6, Column:13},
                                        End:   ast.Location{Line:6, Column:14},
                                    },
                                    inferredType: nil,
                                },
                                Op:    1,
                                Right: &ast.IdentExpr{
                                    Name: "b",
                                    span: ast.Span{
                                        Start: ast.Location{Line:6, Column:17},
                                        End:   ast.Location{Line:6, Column:18},
                                    },
                                    inferredType: nil,
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:6, Column:13},
                                    End:   ast.Location{Line:6, Column:18},
                                },
                                inferredType: nil,
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:6, Column:6},
                                End:   ast.Location{Line:6, Column:18},
                            },
                        },
                    },
                    Span: ast.Span{
                        Start: ast.Location{Line:5, Column:18},
                        End:   ast.Location{Line:7, Column:6},
                    },
                },
                export:  false,
                declare: false,
                span:    ast.Span{
                    Start: ast.Location{Line:5, Column:5},
                    End:   ast.Location{Line:7, Column:6},
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:5, Column:5},
                End:   ast.Location{Line:7, Column:6},
            },
        },
    },
}
---
