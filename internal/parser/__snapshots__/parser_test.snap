
[TestParseExprNoErrors/StringLiteral - 1]
&ast.Expr{
    Kind: &ast.EString{Value:"hello"},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseExprNoErrors/AddSub - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Op:    1,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"c"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseExprNoErrors/IndexPrecedence - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EIndex{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Index: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"c"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:9},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
}
---

[TestParseExprNoErrors/MultipleIndexes - 1]
&ast.Expr{
    Kind: &ast.EIndex{
        Object: &ast.Expr{
            Kind: &ast.EIndex{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Index: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"i"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:3},
                        End:   ast.Location{Line:1, Column:4},
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        Index: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"j"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprNoErrors/OptChainIndex - 1]
&ast.Expr{
    Kind: &ast.EIndex{
        Object: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Index: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"base"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                Op:    0,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"offset"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:17},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:17},
            },
        },
        OptChain: true,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:18},
    },
}
---

[TestParseExprNoErrors/MemberPrecedence - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EMember{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Prop: &ast.Identifier{
                    Name: "c",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprNoErrors/Parens - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    2,
        Right: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Op:    0,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"c"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:10},
                        End:   ast.Location{Line:1, Column:11},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:11},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
}
---

[TestParseExprNoErrors/NumberLiteral - 1]
&ast.Expr{
    Kind: &ast.ENumber{Value:5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:2},
    },
}
---

[TestParseExprNoErrors/Index - 1]
&ast.Expr{
    Kind: &ast.EIndex{
        Object: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Index: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"base"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:3},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Op:    0,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"offset"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:10},
                        End:   ast.Location{Line:1, Column:16},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:3},
                End:   ast.Location{Line:1, Column:16},
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
}
---

[TestParseExprNoErrors/Addition - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"b"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:6},
    },
}
---

[TestParseExprNoErrors/Call - 1]
&ast.Expr{
    Kind: &ast.ECall{
        Callee: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"foo"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Args: {
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"a"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"b"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"c"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:11},
                    End:   ast.Location{Line:1, Column:12},
                },
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
}
---

[TestParseExprNoErrors/UnaryOps - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EUnary{
                Op:  0,
                Arg: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:2},
                        End:   ast.Location{Line:1, Column:3},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
        },
        Op:    1,
        Right: &ast.Expr{
            Kind: &ast.EUnary{
                Op:  1,
                Arg: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:2},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprNoErrors/Member - 1]
&ast.Expr{
    Kind: &ast.EMember{
        Object: &ast.Expr{
            Kind: &ast.EMember{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Prop: &ast.Identifier{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:3},
                        End:   ast.Location{Line:1, Column:4},
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Prop: &ast.Identifier{
            Name: "c",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        OptChain: true,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseExprNoErrors/OptChainCall - 1]
&ast.Expr{
    Kind: &ast.ECall{
        Callee: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"foo"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Args: {
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"bar"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:6},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
        },
        OptChain: true,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseExprNoErrors/MulAdd - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Op:    2,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"c"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                },
                Op:    2,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"d"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:14},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:14},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
}
---

[TestParseExprNoErrors/ArrayLiteral - 1]
&ast.Expr{
    Kind: &ast.EArray{
        Elems: {
            &ast.Expr{
                Kind: &ast.ENumber{Value:1},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
            },
            &ast.Expr{
                Kind: &ast.ENumber{Value:2},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            &ast.Expr{
                Kind: &ast.ENumber{Value:3},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseExprNoErrors/CallPrecedence - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.ECall{
                Callee: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"foo"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                Args: {
                    &ast.Expr{
                        Kind: &ast.EIdentifier{Name:"b"},
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:9},
                            End:   ast.Location{Line:1, Column:10},
                        },
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:11},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
}
---

[TestParseExprNoErrors/MulDiv - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Op:    3,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Op:    2,
        Right: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"c"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseExprNoErrors/CurriedCall - 1]
&ast.Expr{
    Kind: &ast.ECall{
        Callee: &ast.Expr{
            Kind: &ast.ECall{
                Callee: &ast.Expr{
                    Kind: &ast.ECall{
                        Callee: &ast.Expr{
                            Kind: &ast.EIdentifier{Name:"foo"},
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:1},
                                End:   ast.Location{Line:1, Column:4},
                            },
                        },
                        Args: {
                            &ast.Expr{
                                Kind: &ast.EIdentifier{Name:"a"},
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:5},
                                    End:   ast.Location{Line:1, Column:6},
                                },
                            },
                        },
                        OptChain: false,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Args: {
                    &ast.Expr{
                        Kind: &ast.EIdentifier{Name:"b"},
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:8},
                            End:   ast.Location{Line:1, Column:9},
                        },
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:10},
            },
        },
        Args: {
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"c"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:11},
                    End:   ast.Location{Line:1, Column:12},
                },
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:13},
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"b"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprErrorHandling/IncompleteCall - 1]
&ast.Expr{
    Kind: &ast.ECall{
        Callee: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"foo"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Args: {
            &ast.Expr{
                Kind: &ast.EIdentifier{Name:"a"},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            &ast.Expr{
                Kind: &ast.EEmpty{},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:7},
                    End:   ast.Location{Line:1, Column:7},
                },
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EMember{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Prop: &ast.Identifier{
                    Name: "",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
                OptChain: true,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprErrorHandling/ExtraOperatorsInBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Unexpected token",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"a"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:1},
                        End:   ast.Location{Line:1, Column:2},
                    },
                },
                Op:    1,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EEmpty{},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:8},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseExprErrorHandling/IncompleteCall - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/IncompleteMemberOptChain - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "expected an identifier after ?.",
    },
}
---

[TestParseExprErrorHandling/IncompleteBinaryExpr - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:8},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected an expression",
    },
}
---

[TestParseExprErrorHandling/IncompleteMember - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    0,
        Right: &ast.Expr{
            Kind: &ast.EMember{
                Object: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Prop: &ast.Identifier{
                    Name: "",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                OptChain: false,
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseExprErrorHandling/IncompleteMember - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:6},
            End:   ast.Location{Line:1, Column:7},
        },
        Message: "expected an identifier after .",
    },
}
---

[TestParseStmtNoErrors/ValDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 0,
                Name: &ast.Identifier{
                    Name: "x",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Init: &ast.Expr{
                    Kind: &ast.ENumber{Value:5},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:10},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseStmtNoErrors/VarDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 1,
                Name: &ast.Identifier{
                    Name: "x",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:6},
                    },
                },
                Init: &ast.Expr{
                    Kind: &ast.ENumber{Value:5},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:9},
                        End:   ast.Location{Line:1, Column:10},
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:10},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseStmtNoErrors/DeclareValDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 0,
                Name: &ast.Identifier{
                    Name: "x",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:13},
                        End:   ast.Location{Line:1, Column:14},
                    },
                },
                Init: (*ast.Expr)(nil),
            },
            Export:  true,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:14},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
}
---

[TestParseStmtNoErrors/ExportDeclareValDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 0,
                Name: &ast.Identifier{
                    Name: "x",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:20},
                        End:   ast.Location{Line:1, Column:21},
                    },
                },
                Init: (*ast.Expr)(nil),
            },
            Export:  true,
            Declare: true,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:21},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:21},
    },
}
---

[TestParseStmtNoErrors/ExportValDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 0,
                Name: &ast.Identifier{
                    Name: "x",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:13},
                    },
                },
                Init: &ast.Expr{
                    Kind: &ast.ENumber{Value:5},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:16},
                        End:   ast.Location{Line:1, Column:17},
                    },
                },
            },
            Export:  false,
            Declare: true,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:17},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
}
---

[TestParseExprErrorHandling/MismatchedParens - 1]
&ast.Expr{
    Kind: &ast.EBinary{
        Left: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"a"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:2},
            },
        },
        Op:    2,
        Right: &ast.Expr{
            Kind: &ast.EBinary{
                Left: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"b"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:6},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Op:    0,
                Right: &ast.Expr{
                    Kind: &ast.EIdentifier{Name:"c"},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:10},
                        End:   ast.Location{Line:1, Column:11},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:1, Column:6},
                End:   ast.Location{Line:1, Column:11},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:11},
    },
}
---

[TestParseExprErrorHandling/MismatchedParens - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 1]
&ast.Expr{
    Kind: &ast.EArray{
        Elems: {
            &ast.Expr{
                Kind: &ast.ENumber{Value:1},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:2},
                    End:   ast.Location{Line:1, Column:3},
                },
            },
            &ast.Expr{
                Kind: &ast.ENumber{Value:2},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:5},
                    End:   ast.Location{Line:1, Column:6},
                },
            },
            &ast.Expr{
                Kind: &ast.ENumber{Value:3},
                span: ast.Span{
                    Start: ast.Location{Line:1, Column:8},
                    End:   ast.Location{Line:1, Column:9},
                },
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsArrayLiteral - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:2},
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 1]
&ast.Expr{
    Kind: &ast.EIndex{
        Object: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"foo"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Index: &ast.Expr{
            Kind: &ast.EIdentifier{Name:"bar"},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:8},
            },
        },
        OptChain: false,
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:9},
    },
}
---

[TestParseExprErrorHandling/MismatchedBracketsIndex - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected a closing bracket",
    },
}
---

[TestParseStmtNoErrors/FunctionDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:8},
                                End:   ast.Location{Line:1, Column:9},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:11},
                                End:   ast.Location{Line:1, Column:12},
                            },
                        },
                    },
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SExpr{
                            Expr: &ast.Expr{
                                Kind: &ast.EBinary{
                                    Left: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"a"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:16},
                                            End:   ast.Location{Line:1, Column:17},
                                        },
                                    },
                                    Op:    0,
                                    Right: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"b"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:20},
                                            End:   ast.Location{Line:1, Column:21},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:16},
                                    End:   ast.Location{Line:1, Column:21},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:21},
                        },
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithReturn - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:8},
                                End:   ast.Location{Line:1, Column:9},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:11},
                                End:   ast.Location{Line:1, Column:12},
                            },
                        },
                    },
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SReturn{
                            Expr: &ast.Expr{
                                Kind: &ast.EBinary{
                                    Left: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"a"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:23},
                                            End:   ast.Location{Line:1, Column:24},
                                        },
                                    },
                                    Op:    0,
                                    Right: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"b"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:27},
                                            End:   ast.Location{Line:1, Column:28},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:23},
                                    End:   ast.Location{Line:1, Column:28},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:28},
                        },
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithMultipleStmts - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Params: {
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SDecl{
                            Decl: &ast.Decl{
                                Kind: &ast.DVariable{
                                    Kind: 0,
                                    Name: &ast.Identifier{
                                        Name: "a",
                                        span: ast.Span{
                                            Start: ast.Location{Line:2, Column:9},
                                            End:   ast.Location{Line:2, Column:10},
                                        },
                                    },
                                    Init: &ast.Expr{
                                        Kind: &ast.ENumber{Value:5},
                                        span: ast.Span{
                                            Start: ast.Location{Line:2, Column:13},
                                            End:   ast.Location{Line:2, Column:14},
                                        },
                                    },
                                },
                                Export:  false,
                                Declare: false,
                                span:    ast.Span{
                                    Start: ast.Location{Line:2, Column:5},
                                    End:   ast.Location{Line:2, Column:14},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:2, Column:5},
                            End:   ast.Location{Line:2, Column:14},
                        },
                    },
                    &ast.Stmt{
                        Kind: &ast.SDecl{
                            Decl: &ast.Decl{
                                Kind: &ast.DVariable{
                                    Kind: 0,
                                    Name: &ast.Identifier{
                                        Name: "b",
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:9},
                                            End:   ast.Location{Line:3, Column:10},
                                        },
                                    },
                                    Init: &ast.Expr{
                                        Kind: &ast.ENumber{Value:10},
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:13},
                                            End:   ast.Location{Line:3, Column:15},
                                        },
                                    },
                                },
                                Export:  false,
                                Declare: false,
                                span:    ast.Span{
                                    Start: ast.Location{Line:3, Column:5},
                                    End:   ast.Location{Line:3, Column:15},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:3, Column:5},
                            End:   ast.Location{Line:3, Column:15},
                        },
                    },
                    &ast.Stmt{
                        Kind: &ast.SReturn{
                            Expr: &ast.Expr{
                                Kind: &ast.EBinary{
                                    Left: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"a"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:4, Column:12},
                                            End:   ast.Location{Line:4, Column:13},
                                        },
                                    },
                                    Op:    0,
                                    Right: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"b"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:4, Column:16},
                                            End:   ast.Location{Line:4, Column:17},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:4, Column:12},
                                    End:   ast.Location{Line:4, Column:17},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:5},
                            End:   ast.Location{Line:4, Column:17},
                        },
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Params: {
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SDecl{
                            Decl: &ast.Decl{
                                Kind: &ast.DVariable{
                                    Kind: 0,
                                    Name: &ast.Identifier{
                                        Name: "a",
                                        span: ast.Span{
                                            Start: ast.Location{Line:2, Column:9},
                                            End:   ast.Location{Line:2, Column:10},
                                        },
                                    },
                                    Init: &ast.Expr{
                                        Kind: &ast.EEmpty{},
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:5},
                                            End:   ast.Location{Line:3, Column:8},
                                        },
                                    },
                                },
                                Export:  false,
                                Declare: false,
                                span:    ast.Span{
                                    Start: ast.Location{Line:2, Column:5},
                                    End:   ast.Location{Line:3, Column:8},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:2, Column:5},
                            End:   ast.Location{Line:3, Column:8},
                        },
                    },
                    &ast.Stmt{
                        Kind: &ast.SDecl{
                            Decl: &ast.Decl{
                                Kind: &ast.DVariable{
                                    Kind: 0,
                                    Name: &ast.Identifier{
                                        Name: "b",
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:9},
                                            End:   ast.Location{Line:3, Column:10},
                                        },
                                    },
                                    Init: &ast.Expr{
                                        Kind: &ast.ENumber{Value:5},
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:13},
                                            End:   ast.Location{Line:3, Column:14},
                                        },
                                    },
                                },
                                Export:  false,
                                Declare: false,
                                span:    ast.Span{
                                    Start: ast.Location{Line:3, Column:5},
                                    End:   ast.Location{Line:3, Column:14},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:3, Column:5},
                            End:   ast.Location{Line:3, Column:14},
                        },
                    },
                    &ast.Stmt{
                        Kind: &ast.SReturn{
                            Expr: &ast.Expr{
                                Kind: &ast.EBinary{
                                    Left: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"a"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:4, Column:12},
                                            End:   ast.Location{Line:4, Column:13},
                                        },
                                    },
                                    Op:    0,
                                    Right: &ast.Expr{
                                        Kind: &ast.EEmpty{},
                                        span: ast.Span{
                                            Start: ast.Location{Line:5, Column:4},
                                            End:   ast.Location{Line:5, Column:5},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:4, Column:12},
                                    End:   ast.Location{Line:5, Column:5},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:5},
                            End:   ast.Location{Line:5, Column:5},
                        },
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:3, Column:5},
            End:   ast.Location{Line:3, Column:8},
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:5, Column:4},
            End:   ast.Location{Line:5, Column:5},
        },
        Message: "Expected an expression",
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 1]
(*ast.Stmt)(nil)
---

[TestParseStmtErrorHandling/VarDeclMissingIdent - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DVariable{
                Kind: 1,
                Name: &ast.Identifier{
                    Name: "",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:5},
                        End:   ast.Location{Line:1, Column:5},
                    },
                },
                Init: &ast.Expr{
                    Kind: &ast.ENumber{Value:5},
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:7},
                        End:   ast.Location{Line:1, Column:8},
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:8},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected equals sign",
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Expected identifier",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:4},
                    },
                },
                Params: {
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SReturn{
                            Expr: &ast.Expr{
                                Kind: &ast.ENumber{Value:5},
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:15},
                                    End:   ast.Location{Line:1, Column:16},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:8},
                            End:   ast.Location{Line:1, Column:16},
                        },
                    },
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:4},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:4},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected identifier",
    },
}
---

[TestParseStmtNoErrors/DeclareFunctionDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:12},
                        End:   ast.Location{Line:1, Column:15},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:16},
                                End:   ast.Location{Line:1, Column:17},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:19},
                                End:   ast.Location{Line:1, Column:20},
                            },
                        },
                    },
                },
                Body: {
                },
            },
            Export:  true,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:15},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:15},
    },
}
---

[TestParseStmtNoErrors/ExportDeclareFunctionDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:19},
                        End:   ast.Location{Line:1, Column:22},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:23},
                                End:   ast.Location{Line:1, Column:24},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:26},
                                End:   ast.Location{Line:1, Column:27},
                            },
                        },
                    },
                },
                Body: {
                },
            },
            Export:  true,
            Declare: true,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:22},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:22},
    },
}
---

[TestParseStmtNoErrors/ExportFunctionDecl - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:14},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:15},
                                End:   ast.Location{Line:1, Column:16},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:18},
                                End:   ast.Location{Line:1, Column:19},
                            },
                        },
                    },
                },
                Body: {
                    &ast.Stmt{
                        Kind: &ast.SExpr{
                            Expr: &ast.Expr{
                                Kind: &ast.EBinary{
                                    Left: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"a"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:23},
                                            End:   ast.Location{Line:1, Column:24},
                                        },
                                    },
                                    Op:    0,
                                    Right: &ast.Expr{
                                        Kind: &ast.EIdentifier{Name:"b"},
                                        span: ast.Span{
                                            Start: ast.Location{Line:1, Column:27},
                                            End:   ast.Location{Line:1, Column:28},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:1, Column:23},
                                    End:   ast.Location{Line:1, Column:28},
                                },
                            },
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:23},
                            End:   ast.Location{Line:1, Column:28},
                        },
                    },
                },
            },
            Export:  false,
            Declare: true,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:14},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 1]
&ast.Stmt{
    Kind: &ast.SDecl{
        Decl: &ast.Decl{
            Kind: &ast.DFunction{
                Name: &ast.Identifier{
                    Name: "foo",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:4},
                        End:   ast.Location{Line:1, Column:7},
                    },
                },
                Params: {
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:8},
                                End:   ast.Location{Line:1, Column:9},
                            },
                        },
                    },
                    &ast.Param{
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:11},
                                End:   ast.Location{Line:1, Column:12},
                            },
                        },
                    },
                },
                Body: {
                },
            },
            Export:  false,
            Declare: false,
            span:    ast.Span{
                Start: ast.Location{Line:1, Column:1},
                End:   ast.Location{Line:1, Column:7},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:7},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:13},
            End:   ast.Location{Line:1, Column:13},
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseModuleNoErrors/ExprStmts - 1]
&ast.Module{
    Stmts: {
        &ast.Stmt{
            Kind: &ast.SExpr{
                Expr: &ast.Expr{
                    Kind: &ast.ECall{
                        Callee: &ast.Expr{
                            Kind: &ast.EIdentifier{Name:"foo"},
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:5},
                                End:   ast.Location{Line:2, Column:8},
                            },
                        },
                        Args: {
                        },
                        OptChain: false,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:2, Column:10},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:10},
            },
        },
        &ast.Stmt{
            Kind: &ast.SExpr{
                Expr: &ast.Expr{
                    Kind: &ast.ECall{
                        Callee: &ast.Expr{
                            Kind: &ast.EIdentifier{Name:"bar"},
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:5},
                                End:   ast.Location{Line:3, Column:8},
                            },
                        },
                        Args: {
                        },
                        OptChain: false,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:5},
                        End:   ast.Location{Line:3, Column:10},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:3, Column:5},
                End:   ast.Location{Line:3, Column:10},
            },
        },
    },
}
---

[TestParseModuleNoErrors/VarDecls - 1]
&ast.Module{
    Stmts: {
        &ast.Stmt{
            Kind: &ast.SDecl{
                Decl: &ast.Decl{
                    Kind: &ast.DVariable{
                        Kind: 0,
                        Name: &ast.Identifier{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:9},
                                End:   ast.Location{Line:2, Column:10},
                            },
                        },
                        Init: &ast.Expr{
                            Kind: &ast.ENumber{Value:5},
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:13},
                                End:   ast.Location{Line:2, Column:14},
                            },
                        },
                    },
                    Export:  false,
                    Declare: false,
                    span:    ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:2, Column:14},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:14},
            },
        },
        &ast.Stmt{
            Kind: &ast.SDecl{
                Decl: &ast.Decl{
                    Kind: &ast.DVariable{
                        Kind: 0,
                        Name: &ast.Identifier{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:9},
                                End:   ast.Location{Line:3, Column:10},
                            },
                        },
                        Init: &ast.Expr{
                            Kind: &ast.ENumber{Value:10},
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:13},
                                End:   ast.Location{Line:3, Column:15},
                            },
                        },
                    },
                    Export:  false,
                    Declare: false,
                    span:    ast.Span{
                        Start: ast.Location{Line:3, Column:5},
                        End:   ast.Location{Line:3, Column:15},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:3, Column:5},
                End:   ast.Location{Line:3, Column:15},
            },
        },
        &ast.Stmt{
            Kind: &ast.SDecl{
                Decl: &ast.Decl{
                    Kind: &ast.DVariable{
                        Kind: 0,
                        Name: &ast.Identifier{
                            Name: "sum",
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:9},
                                End:   ast.Location{Line:4, Column:12},
                            },
                        },
                        Init: &ast.Expr{
                            Kind: &ast.EBinary{
                                Left: &ast.Expr{
                                    Kind: &ast.EIdentifier{Name:"a"},
                                    span: ast.Span{
                                        Start: ast.Location{Line:4, Column:15},
                                        End:   ast.Location{Line:4, Column:16},
                                    },
                                },
                                Op:    0,
                                Right: &ast.Expr{
                                    Kind: &ast.EIdentifier{Name:"b"},
                                    span: ast.Span{
                                        Start: ast.Location{Line:4, Column:19},
                                        End:   ast.Location{Line:4, Column:20},
                                    },
                                },
                            },
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:15},
                                End:   ast.Location{Line:4, Column:20},
                            },
                        },
                    },
                    Export:  false,
                    Declare: false,
                    span:    ast.Span{
                        Start: ast.Location{Line:4, Column:5},
                        End:   ast.Location{Line:4, Column:20},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:4, Column:5},
                End:   ast.Location{Line:4, Column:20},
            },
        },
    },
}
---

[TestParseModuleNoErrors/FuncDecls - 1]
&ast.Module{
    Stmts: {
        &ast.Stmt{
            Kind: &ast.SDecl{
                Decl: &ast.Decl{
                    Kind: &ast.DFunction{
                        Name: &ast.Identifier{
                            Name: "add",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:8},
                                End:   ast.Location{Line:2, Column:11},
                            },
                        },
                        Params: {
                            &ast.Param{
                                Name: &ast.Identifier{
                                    Name: "a",
                                    span: ast.Span{
                                        Start: ast.Location{Line:2, Column:12},
                                        End:   ast.Location{Line:2, Column:13},
                                    },
                                },
                            },
                            &ast.Param{
                                Name: &ast.Identifier{
                                    Name: "b",
                                    span: ast.Span{
                                        Start: ast.Location{Line:2, Column:15},
                                        End:   ast.Location{Line:2, Column:16},
                                    },
                                },
                            },
                        },
                        Body: {
                            &ast.Stmt{
                                Kind: &ast.SReturn{
                                    Expr: &ast.Expr{
                                        Kind: &ast.EBinary{
                                            Left: &ast.Expr{
                                                Kind: &!%v(DEPTH EXCEEDED),
                                                span: ast.Span{
                                                    Start: ast.Location{Line:3, Column:13},
                                                    End:   ast.Location{Line:3, Column:14},
                                                },
                                            },
                                            Op:    0,
                                            Right: &ast.Expr{
                                                Kind: &!%v(DEPTH EXCEEDED),
                                                span: ast.Span{
                                                    Start: ast.Location{Line:3, Column:17},
                                                    End:   ast.Location{Line:3, Column:18},
                                                },
                                            },
                                        },
                                        span: ast.Span{
                                            Start: ast.Location{Line:3, Column:13},
                                            End:   ast.Location{Line:3, Column:18},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:3, Column:6},
                                    End:   ast.Location{Line:3, Column:18},
                                },
                            },
                        },
                    },
                    Export:  false,
                    Declare: false,
                    span:    ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:2, Column:11},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:2, Column:5},
                End:   ast.Location{Line:2, Column:11},
            },
        },
        &ast.Stmt{
            Kind: &ast.SDecl{
                Decl: &ast.Decl{
                    Kind: &ast.DFunction{
                        Name: &ast.Identifier{
                            Name: "sub",
                            span: ast.Span{
                                Start: ast.Location{Line:5, Column:8},
                                End:   ast.Location{Line:5, Column:11},
                            },
                        },
                        Params: {
                            &ast.Param{
                                Name: &ast.Identifier{
                                    Name: "a",
                                    span: ast.Span{
                                        Start: ast.Location{Line:5, Column:12},
                                        End:   ast.Location{Line:5, Column:13},
                                    },
                                },
                            },
                            &ast.Param{
                                Name: &ast.Identifier{
                                    Name: "b",
                                    span: ast.Span{
                                        Start: ast.Location{Line:5, Column:15},
                                        End:   ast.Location{Line:5, Column:16},
                                    },
                                },
                            },
                        },
                        Body: {
                            &ast.Stmt{
                                Kind: &ast.SReturn{
                                    Expr: &ast.Expr{
                                        Kind: &ast.EBinary{
                                            Left: &ast.Expr{
                                                Kind: &!%v(DEPTH EXCEEDED),
                                                span: ast.Span{
                                                    Start: ast.Location{Line:6, Column:13},
                                                    End:   ast.Location{Line:6, Column:14},
                                                },
                                            },
                                            Op:    1,
                                            Right: &ast.Expr{
                                                Kind: &!%v(DEPTH EXCEEDED),
                                                span: ast.Span{
                                                    Start: ast.Location{Line:6, Column:17},
                                                    End:   ast.Location{Line:6, Column:18},
                                                },
                                            },
                                        },
                                        span: ast.Span{
                                            Start: ast.Location{Line:6, Column:13},
                                            End:   ast.Location{Line:6, Column:18},
                                        },
                                    },
                                },
                                span: ast.Span{
                                    Start: ast.Location{Line:6, Column:6},
                                    End:   ast.Location{Line:6, Column:18},
                                },
                            },
                        },
                    },
                    Export:  false,
                    Declare: false,
                    span:    ast.Span{
                        Start: ast.Location{Line:5, Column:5},
                        End:   ast.Location{Line:5, Column:11},
                    },
                },
            },
            span: ast.Span{
                Start: ast.Location{Line:5, Column:5},
                End:   ast.Location{Line:5, Column:11},
            },
        },
    },
}
---

[TestParseExprNoErrors/SingleUnaryOp - 1]
&ast.Expr{
    Kind: &ast.EUnary{
        Op:  1,
        Arg: &ast.Expr{
            Kind: &ast.ENumber{Value:5},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:2},
                End:   ast.Location{Line:1, Column:3},
            },
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:2},
        End:   ast.Location{Line:1, Column:3},
    },
}
---

[TestParseExprNoErrors/NumberLiteralTrailingDecimal - 1]
&ast.Expr{
    Kind: &ast.ENumber{Value:1},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
}
---

[TestParseExprNoErrors/NumberLiteralDecimal - 1]
&ast.Expr{
    Kind: &ast.ENumber{Value:1.5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:4},
    },
}
---

[TestParseExprNoErrors/NumberLiteralLeadingDecimal - 1]
&ast.Expr{
    Kind: &ast.ENumber{Value:0.5},
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:3},
    },
}
---
