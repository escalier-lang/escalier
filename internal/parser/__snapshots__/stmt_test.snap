
[TestParseStmtErrorHandling/VarDeclMissingIdent - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    1,
        Pattern: &ast.IdentPat{
            Name:    "",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:1},
                End:      ast.Location{Line:1, Column:1},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:7},
                    End:      ast.Location{Line:1, Column:8},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:8},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:8},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:4},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.LiteralExpr{
                        Lit: &ast.NumLit{
                            Value: 5,
                            span:  ast.Span{
                                Start:    ast.Location{Line:1, Column:15},
                                End:      ast.Location{Line:1, Column:16},
                                SourceID: 0,
                            },
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:15},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:8},
                        End:      ast.Location{Line:1, Column:16},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:7},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:17},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:17},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:5},
            End:      ast.Location{Line:1, Column:6},
            SourceID: 0,
        },
        Message: "Expected a pattern",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:4},
            SourceID: 0,
        },
        Message: "Expected pattern",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:4},
            End:      ast.Location{Line:1, Column:5},
            SourceID: 0,
        },
        Message: "Expected identifier",
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 1]
nil
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:7},
            End:      ast.Location{Line:1, Column:8},
            SourceID: 0,
        },
        Message: "Expected equals sign",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:8},
                            End:      ast.Location{Line:1, Column:9},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:13},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:13},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:13},
            End:      ast.Location{Line:1, Column:13},
            SourceID: 0,
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind:    0,
                        Pattern: &ast.IdentPat{
                            Name:    "a",
                            Default: nil,
                            span:    ast.Span{
                                Start:    ast.Location{Line:2, Column:9},
                                End:      ast.Location{Line:2, Column:10},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        TypeAnn: nil,
                        Init:    &ast.EmptyExpr{
                            span: ast.Span{
                                Start:    ast.Location{Line:3, Column:5},
                                End:      ast.Location{Line:3, Column:8},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start:    ast.Location{Line:2, Column:5},
                            End:      ast.Location{Line:3, Column:8},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:2, Column:5},
                        End:      ast.Location{Line:3, Column:8},
                        SourceID: 0,
                    },
                },
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind:    0,
                        Pattern: &ast.IdentPat{
                            Name:    "b",
                            Default: nil,
                            span:    ast.Span{
                                Start:    ast.Location{Line:3, Column:9},
                                End:      ast.Location{Line:3, Column:10},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        TypeAnn: nil,
                        Init:    &ast.LiteralExpr{
                            Lit: &ast.NumLit{
                                Value: 5,
                                span:  ast.Span{
                                    Start:    ast.Location{Line:3, Column:13},
                                    End:      ast.Location{Line:3, Column:14},
                                    SourceID: 0,
                                },
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:3, Column:13},
                                End:      ast.Location{Line:3, Column:14},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start:    ast.Location{Line:3, Column:5},
                            End:      ast.Location{Line:3, Column:14},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:3, Column:5},
                        End:      ast.Location{Line:3, Column:14},
                        SourceID: 0,
                    },
                },
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:4, Column:12},
                                End:      ast.Location{Line:4, Column:13},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.EmptyExpr{
                            span: ast.Span{
                                Start:    ast.Location{Line:5, Column:4},
                                End:      ast.Location{Line:5, Column:5},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:4, Column:12},
                            End:      ast.Location{Line:5, Column:5},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:4, Column:5},
                        End:      ast.Location{Line:5, Column:5},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:5, Column:5},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:5, Column:5},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:5, Column:5},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:3, Column:5},
            End:      ast.Location{Line:3, Column:8},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:5, Column:4},
            End:      ast.Location{Line:5, Column:5},
            SourceID: 0,
        },
        Message: "Expected an expression",
    },
}
---

[TestParseStmtErrorHandling/ParamsMissingOpeningParen - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:8},
                            End:      ast.Location{Line:1, Column:9},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:16},
                                End:      ast.Location{Line:1, Column:17},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:20},
                                End:      ast.Location{Line:1, Column:21},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:23},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:23},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:23},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/ParamsMissingOpeningParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:8},
            End:      ast.Location{Line:1, Column:9},
            SourceID: 0,
        },
        Message: "Expected an opening paren",
    },
}
---

[TestParseStmtErrorHandling/ParamsMissingClosingParen - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:9},
                            End:      ast.Location{Line:1, Column:10},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:12},
                            End:      ast.Location{Line:1, Column:13},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:16},
                                End:      ast.Location{Line:1, Column:17},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:20},
                                End:      ast.Location{Line:1, Column:21},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:23},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:23},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:23},
        SourceID: 0,
    },
}
---

[TestParseStmtErrorHandling/ParamsMissingClosingParen - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start:    ast.Location{Line:1, Column:14},
            End:      ast.Location{Line:1, Column:15},
            SourceID: 0,
        },
        Message: "Expected a closing paren",
    },
}
---

[TestParseStmtNoErrors/TypeDeclWithLeadingPipe - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
        },
        TypeAnn: &ast.UnionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Foo",
                        span: ast.Span{
                            Start:    ast.Location{Line:2, Column:7},
                            End:      ast.Location{Line:2, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:2, Column:7},
                        End:      ast.Location{Line:2, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Bar",
                        span: ast.Span{
                            Start:    ast.Location{Line:3, Column:7},
                            End:      ast.Location{Line:3, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:3, Column:7},
                        End:      ast.Location{Line:3, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Baz",
                        span: ast.Span{
                            Start:    ast.Location{Line:4, Column:7},
                            End:      ast.Location{Line:4, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:4, Column:7},
                        End:      ast.Location{Line:4, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:2, Column:7},
                End:      ast.Location{Line:4, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:4, Column:10},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:4, Column:10},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/VarDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    1,
        Pattern: &ast.IdentPat{
            Name:    "x",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/ValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name:    "x",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:6},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:9},
                    End:      ast.Location{Line:1, Column:10},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:9},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:10},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:10},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/ExportValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name:    "x",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:12},
                End:      ast.Location{Line:1, Column:13},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:16},
                    End:      ast.Location{Line:1, Column:17},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:16},
                End:      ast.Location{Line:1, Column:17},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  true,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:17},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:17},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/DeclareFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:12},
                End:      ast.Location{Line:1, Column:15},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:17},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:19},
                            End:      ast.Location{Line:1, Column:20},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body:    &ast.Block{},
        export:  false,
        declare: true,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:21},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/ExportDeclareFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:19},
                End:      ast.Location{Line:1, Column:22},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:23},
                            End:      ast.Location{Line:1, Column:24},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:26},
                            End:      ast.Location{Line:1, Column:27},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body:    &ast.Block{},
        export:  true,
        declare: true,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:28},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:28},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/TypeDeclWithComments - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
        },
        TypeAnn: &ast.UnionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Foo",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:15},
                            End:      ast.Location{Line:1, Column:18},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:15},
                        End:      ast.Location{Line:1, Column:18},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Bar",
                        span: ast.Span{
                            Start:    ast.Location{Line:3, Column:7},
                            End:      ast.Location{Line:3, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:3, Column:7},
                        End:      ast.Location{Line:3, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "Baz",
                        span: ast.Span{
                            Start:    ast.Location{Line:5, Column:7},
                            End:      ast.Location{Line:5, Column:10},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:5, Column:7},
                        End:      ast.Location{Line:5, Column:10},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:5, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:5, Column:10},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:5, Column:10},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/ExportFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:11},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:15},
                            End:      ast.Location{Line:1, Column:16},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:18},
                            End:      ast.Location{Line:1, Column:19},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:23},
                                End:      ast.Location{Line:1, Column:24},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:27},
                                End:      ast.Location{Line:1, Column:28},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:23},
                            End:      ast.Location{Line:1, Column:28},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:23},
                        End:      ast.Location{Line:1, Column:28},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:21},
                End:      ast.Location{Line:1, Column:30},
                SourceID: 0,
            },
        },
        export:  true,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:30},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:30},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithReturn - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:8},
                            End:      ast.Location{Line:1, Column:9},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:23},
                                End:      ast.Location{Line:1, Column:24},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:27},
                                End:      ast.Location{Line:1, Column:28},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:23},
                            End:      ast.Location{Line:1, Column:28},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:28},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:30},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:30},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:30},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/FunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:8},
                            End:      ast.Location{Line:1, Column:9},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:16},
                                End:      ast.Location{Line:1, Column:17},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:20},
                                End:      ast.Location{Line:1, Column:21},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:16},
                            End:      ast.Location{Line:1, Column:21},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:21},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:14},
                End:      ast.Location{Line:1, Column:23},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:23},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:23},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/ExportDeclareValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name:    "x",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:20},
                End:      ast.Location{Line:1, Column:21},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    nil,
        export:  true,
        declare: true,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:21},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:21},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/TypeDecl - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
        },
        TypeAnn: &ast.ObjectTypeAnn{
            Elems: {
                &ast.PropertyTypeAnn{
                    Name: &ast.IdentExpr{
                        Name:      "x",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:17},
                            End:      ast.Location{Line:1, Column:18},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    Readonly: false,
                    Value:    &ast.NumberTypeAnn{
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:20},
                            End:      ast.Location{Line:1, Column:26},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                &ast.PropertyTypeAnn{
                    Name: &ast.IdentExpr{
                        Name:      "y",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:28},
                            End:      ast.Location{Line:1, Column:29},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    Readonly: false,
                    Value:    &ast.StringTypeAnn{
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:31},
                            End:      ast.Location{Line:1, Column:37},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:15},
                End:      ast.Location{Line:1, Column:39},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:39},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:39},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/DeclareValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name:    "x",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:13},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    nil,
        export:  false,
        declare: true,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/UnicodeVarDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind:    0,
        Pattern: &ast.IdentPat{
            Name:    "längd",
            Default: nil,
            span:    ast.Span{
                Start:    ast.Location{Line:1, Column:5},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
            inferredType: nil,
        },
        TypeAnn: nil,
        Init:    &ast.LiteralExpr{
            Lit: &ast.NumLit{
                Value: 5,
                span:  ast.Span{
                    Start:    ast.Location{Line:1, Column:13},
                    End:      ast.Location{Line:1, Column:14},
                    SourceID: 0,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:13},
                End:      ast.Location{Line:1, Column:14},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:14},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:14},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/UnicodeFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "до́бра",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:10},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "a",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:11},
                            End:      ast.Location{Line:1, Column:12},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
                &ast.Param{
                    Pattern: &ast.IdentPat{
                        Name:    "b",
                        Default: nil,
                        span:    ast.Span{
                            Start:    ast.Location{Line:1, Column:14},
                            End:      ast.Location{Line:1, Column:15},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    TypeAnn:  nil,
                },
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:19},
                                End:      ast.Location{Line:1, Column:20},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:1, Column:23},
                                End:      ast.Location{Line:1, Column:24},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:19},
                            End:      ast.Location{Line:1, Column:24},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:19},
                        End:      ast.Location{Line:1, Column:24},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:17},
                End:      ast.Location{Line:1, Column:26},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:26},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithMultipleStmts - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:4},
                End:      ast.Location{Line:1, Column:7},
                SourceID: 0,
            },
        },
        FuncSig: ast.FuncSig{
            TypeParams: {
            },
            Params: {
            },
            Return: nil,
            Throws: nil,
        },
        Body: &ast.Block{
            Stmts: {
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind:    0,
                        Pattern: &ast.IdentPat{
                            Name:    "a",
                            Default: nil,
                            span:    ast.Span{
                                Start:    ast.Location{Line:2, Column:9},
                                End:      ast.Location{Line:2, Column:10},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        TypeAnn: nil,
                        Init:    &ast.LiteralExpr{
                            Lit: &ast.NumLit{
                                Value: 5,
                                span:  ast.Span{
                                    Start:    ast.Location{Line:2, Column:13},
                                    End:      ast.Location{Line:2, Column:14},
                                    SourceID: 0,
                                },
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:2, Column:13},
                                End:      ast.Location{Line:2, Column:14},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start:    ast.Location{Line:2, Column:5},
                            End:      ast.Location{Line:2, Column:14},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:2, Column:5},
                        End:      ast.Location{Line:2, Column:14},
                        SourceID: 0,
                    },
                },
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind:    0,
                        Pattern: &ast.IdentPat{
                            Name:    "b",
                            Default: nil,
                            span:    ast.Span{
                                Start:    ast.Location{Line:3, Column:9},
                                End:      ast.Location{Line:3, Column:10},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        TypeAnn: nil,
                        Init:    &ast.LiteralExpr{
                            Lit: &ast.NumLit{
                                Value: 10,
                                span:  ast.Span{
                                    Start:    ast.Location{Line:3, Column:13},
                                    End:      ast.Location{Line:3, Column:15},
                                    SourceID: 0,
                                },
                            },
                            span: ast.Span{
                                Start:    ast.Location{Line:3, Column:13},
                                End:      ast.Location{Line:3, Column:15},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start:    ast.Location{Line:3, Column:5},
                            End:      ast.Location{Line:3, Column:15},
                            SourceID: 0,
                        },
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:3, Column:5},
                        End:      ast.Location{Line:3, Column:15},
                        SourceID: 0,
                    },
                },
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name:      "a",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:4, Column:12},
                                End:      ast.Location{Line:4, Column:13},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        Op:    "+",
                        Right: &ast.IdentExpr{
                            Name:      "b",
                            Namespace: 0,
                            Source:    nil,
                            span:      ast.Span{
                                Start:    ast.Location{Line:4, Column:16},
                                End:      ast.Location{Line:4, Column:17},
                                SourceID: 0,
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:4, Column:12},
                            End:      ast.Location{Line:4, Column:17},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:4, Column:5},
                        End:      ast.Location{Line:4, Column:17},
                        SourceID: 0,
                    },
                },
            },
            Span: ast.Span{
                Start:    ast.Location{Line:1, Column:10},
                End:      ast.Location{Line:5, Column:5},
                SourceID: 0,
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:5, Column:5},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:5, Column:5},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/TypeDeclWithMultipleTypeParams - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
            &ast.TypeParam{
                Name:       "T",
                Constraint: nil,
                Default:    nil,
            },
            &ast.TypeParam{
                Name:       "U",
                Constraint: &ast.StringTypeAnn{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:19},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Default: nil,
            },
        },
        TypeAnn: &ast.ObjectTypeAnn{
            Elems: {
                &ast.PropertyTypeAnn{
                    Name: &ast.IdentExpr{
                        Name:      "first",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:31},
                            End:      ast.Location{Line:1, Column:36},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    Readonly: false,
                    Value:    &ast.TypeRefTypeAnn{
                        Name: &ast.Ident{
                            Name: "T",
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:38},
                                End:      ast.Location{Line:1, Column:39},
                                SourceID: 0,
                            },
                        },
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:38},
                            End:      ast.Location{Line:1, Column:39},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
                &ast.PropertyTypeAnn{
                    Name: &ast.IdentExpr{
                        Name:      "second",
                        Namespace: 0,
                        Source:    nil,
                        span:      ast.Span{
                            Start:    ast.Location{Line:1, Column:41},
                            End:      ast.Location{Line:1, Column:47},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                    Optional: false,
                    Readonly: false,
                    Value:    &ast.TypeRefTypeAnn{
                        Name: &ast.Ident{
                            Name: "U",
                            span: ast.Span{
                                Start:    ast.Location{Line:1, Column:49},
                                End:      ast.Location{Line:1, Column:50},
                                SourceID: 0,
                            },
                        },
                        TypeArgs: {
                        },
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:49},
                            End:      ast.Location{Line:1, Column:50},
                            SourceID: 0,
                        },
                        inferredType: nil,
                    },
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:29},
                End:      ast.Location{Line:1, Column:52},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:52},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:52},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/TypeDeclWithTypeParams - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
            &ast.TypeParam{
                Name:       "T",
                Constraint: nil,
                Default:    nil,
            },
        },
        TypeAnn: &ast.TypeRefTypeAnn{
            Name: &ast.Ident{
                Name: "Array",
                span: ast.Span{
                    Start:    ast.Location{Line:1, Column:18},
                    End:      ast.Location{Line:1, Column:23},
                    SourceID: 0,
                },
            },
            TypeArgs: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "T",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:24},
                            End:      ast.Location{Line:1, Column:25},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:24},
                        End:      ast.Location{Line:1, Column:25},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:18},
                End:      ast.Location{Line:1, Column:26},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:26},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:26},
        SourceID: 0,
    },
}
---

[TestParseStmtNoErrors/TypeDeclWithConstrainedTypeParams - 1]
&ast.DeclStmt{
    Decl: &ast.TypeDecl{
        Name: &ast.Ident{
            Name: "MyType",
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:6},
                End:      ast.Location{Line:1, Column:12},
                SourceID: 0,
            },
        },
        TypeParams: {
            &ast.TypeParam{
                Name:       "T",
                Constraint: &ast.NumberTypeAnn{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:16},
                        End:      ast.Location{Line:1, Column:22},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Default: nil,
            },
            &ast.TypeParam{
                Name:       "U",
                Constraint: &ast.StringTypeAnn{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:27},
                        End:      ast.Location{Line:1, Column:33},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                Default: &ast.StringTypeAnn{
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:36},
                        End:      ast.Location{Line:1, Column:42},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
        },
        TypeAnn: &ast.UnionTypeAnn{
            Types: {
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "T",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:46},
                            End:      ast.Location{Line:1, Column:47},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:46},
                        End:      ast.Location{Line:1, Column:47},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
                &ast.TypeRefTypeAnn{
                    Name: &ast.Ident{
                        Name: "U",
                        span: ast.Span{
                            Start:    ast.Location{Line:1, Column:50},
                            End:      ast.Location{Line:1, Column:51},
                            SourceID: 0,
                        },
                    },
                    TypeArgs: {
                    },
                    span: ast.Span{
                        Start:    ast.Location{Line:1, Column:50},
                        End:      ast.Location{Line:1, Column:51},
                        SourceID: 0,
                    },
                    inferredType: nil,
                },
            },
            span: ast.Span{
                Start:    ast.Location{Line:1, Column:46},
                End:      ast.Location{Line:1, Column:51},
                SourceID: 0,
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start:    ast.Location{Line:1, Column:1},
            End:      ast.Location{Line:1, Column:51},
            SourceID: 0,
        },
    },
    span: ast.Span{
        Start:    ast.Location{Line:1, Column:1},
        End:      ast.Location{Line:1, Column:51},
        SourceID: 0,
    },
}
---
