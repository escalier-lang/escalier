
[TestParseStmtNoErrors/DeclareValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 0,
        Name: &ast.Ident{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:13},
                End:   ast.Location{Line:1, Column:14},
            },
        },
        Init:    nil,
        export:  true,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:14},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:14},
    },
}
---

[TestParseStmtNoErrors/ExportDeclareValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 0,
        Name: &ast.Ident{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:20},
                End:   ast.Location{Line:1, Column:21},
            },
        },
        Init:    nil,
        export:  true,
        declare: true,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:21},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:21},
    },
}
---

[TestParseStmtNoErrors/ExportValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 0,
        Name: &ast.Ident{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:12},
                End:   ast.Location{Line:1, Column:13},
            },
        },
        Init: &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:5},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:16},
                End:   ast.Location{Line:1, Column:17},
            },
            inferredType: nil,
        },
        export:  false,
        declare: true,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:17},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
}
---

[TestParseStmtNoErrors/ExportDeclareFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:19},
                End:   ast.Location{Line:1, Column:22},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:23},
                        End:   ast.Location{Line:1, Column:24},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:26},
                        End:   ast.Location{Line:1, Column:27},
                    },
                },
            },
        },
        Body:    ast.Block{},
        export:  true,
        declare: true,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:28},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:28},
    },
}
---

[TestParseStmtNoErrors/ExportFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:11},
                End:   ast.Location{Line:1, Column:14},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:15},
                        End:   ast.Location{Line:1, Column:16},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:18},
                        End:   ast.Location{Line:1, Column:19},
                    },
                },
            },
        },
        Body: ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:23},
                                End:   ast.Location{Line:1, Column:24},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:27},
                                End:   ast.Location{Line:1, Column:28},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:23},
                            End:   ast.Location{Line:1, Column:28},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:23},
                        End:   ast.Location{Line:1, Column:28},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:21},
                End:   ast.Location{Line:1, Column:30},
            },
        },
        export:  false,
        declare: true,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:30},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:30},
    },
}
---

[TestParseStmtNoErrors/DeclareFunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:12},
                End:   ast.Location{Line:1, Column:15},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:16},
                        End:   ast.Location{Line:1, Column:17},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:19},
                        End:   ast.Location{Line:1, Column:20},
                    },
                },
            },
        },
        Body:    ast.Block{},
        export:  true,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:21},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:21},
    },
}
---

[TestParseStmtNoErrors/VarDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 1,
        Name: &ast.Ident{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Init: &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:5},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:10},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseStmtNoErrors/FunctionDecl - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:12},
                    },
                },
            },
        },
        Body: ast.Block{
            Stmts: {
                &ast.ExprStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:16},
                                End:   ast.Location{Line:1, Column:17},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:20},
                                End:   ast.Location{Line:1, Column:21},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:16},
                            End:   ast.Location{Line:1, Column:21},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:16},
                        End:   ast.Location{Line:1, Column:21},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:14},
                End:   ast.Location{Line:1, Column:23},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:23},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:23},
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithReturn - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:12},
                    },
                },
            },
        },
        Body: ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:23},
                                End:   ast.Location{Line:1, Column:24},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:1, Column:27},
                                End:   ast.Location{Line:1, Column:28},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:23},
                            End:   ast.Location{Line:1, Column:28},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:16},
                        End:   ast.Location{Line:1, Column:28},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:14},
                End:   ast.Location{Line:1, Column:30},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:30},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:30},
    },
}
---

[TestParseStmtNoErrors/ValDecl - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 0,
        Name: &ast.Ident{
            Name: "x",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:6},
            },
        },
        Init: &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:5},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:9},
                End:   ast.Location{Line:1, Column:10},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:10},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:10},
    },
}
---

[TestParseStmtNoErrors/FunctionDeclWithMultipleStmts - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        Params: {
        },
        Body: ast.Block{
            Stmts: {
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind: 0,
                        Name: &ast.Ident{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:9},
                                End:   ast.Location{Line:2, Column:10},
                            },
                        },
                        Init: &ast.LiteralExpr{
                            Lit:  &ast.NumLit{Value:5},
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:13},
                                End:   ast.Location{Line:2, Column:14},
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start: ast.Location{Line:2, Column:5},
                            End:   ast.Location{Line:2, Column:14},
                        },
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:2, Column:14},
                    },
                },
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind: 0,
                        Name: &ast.Ident{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:9},
                                End:   ast.Location{Line:3, Column:10},
                            },
                        },
                        Init: &ast.LiteralExpr{
                            Lit:  &ast.NumLit{Value:10},
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:13},
                                End:   ast.Location{Line:3, Column:15},
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start: ast.Location{Line:3, Column:5},
                            End:   ast.Location{Line:3, Column:15},
                        },
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:5},
                        End:   ast.Location{Line:3, Column:15},
                    },
                },
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:12},
                                End:   ast.Location{Line:4, Column:13},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.IdentExpr{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:16},
                                End:   ast.Location{Line:4, Column:17},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:12},
                            End:   ast.Location{Line:4, Column:17},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:4, Column:5},
                        End:   ast.Location{Line:4, Column:17},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:5, Column:5},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:5, Column:5},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:5, Column:5},
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingIdent - 1]
&ast.DeclStmt{
    Decl: &ast.VarDecl{
        Kind: 1,
        Name: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:5},
                End:   ast.Location{Line:1, Column:5},
            },
        },
        Init: &ast.LiteralExpr{
            Lit:  &ast.NumLit{Value:5},
            span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:8},
            },
            inferredType: nil,
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:8},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:8},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:4},
            },
        },
        Params: {
        },
        Body: ast.Block{
            Stmts: {
                &ast.ReturnStmt{
                    Expr: &ast.LiteralExpr{
                        Lit:  &ast.NumLit{Value:5},
                        span: ast.Span{
                            Start: ast.Location{Line:1, Column:15},
                            End:   ast.Location{Line:1, Column:16},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:16},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:7},
                End:   ast.Location{Line:1, Column:17},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:1, Column:17},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:1, Column:17},
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:5},
            End:   ast.Location{Line:1, Column:6},
        },
        Message: "Expected identifier",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingIdent - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:4},
            End:   ast.Location{Line:1, Column:5},
        },
        Message: "Expected identifier",
    },
}
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 1]
nil
---

[TestParseStmtErrorHandling/VarDeclMissingEquals - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:7},
            End:   ast.Location{Line:1, Column:8},
        },
        Message: "Expected equals sign",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        Params: {
            &ast.Param{
                Name: &ast.Ident{
                    Name: "a",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:8},
                        End:   ast.Location{Line:1, Column:9},
                    },
                },
            },
            &ast.Param{
                Name: &ast.Ident{
                    Name: "b",
                    span: ast.Span{
                        Start: ast.Location{Line:1, Column:11},
                        End:   ast.Location{Line:1, Column:12},
                    },
                },
            },
        },
        Body: ast.Block{
            Stmts: {
            },
            Span: ast.Span{},
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclMissingBoyd - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:1, Column:13},
            End:   ast.Location{Line:1, Column:13},
        },
        Message: "Expected an opening brace",
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 1]
&ast.DeclStmt{
    Decl: &ast.FuncDecl{
        Name: &ast.Ident{
            Name: "foo",
            span: ast.Span{
                Start: ast.Location{Line:1, Column:4},
                End:   ast.Location{Line:1, Column:7},
            },
        },
        Params: {
        },
        Body: ast.Block{
            Stmts: {
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind: 0,
                        Name: &ast.Ident{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:2, Column:9},
                                End:   ast.Location{Line:2, Column:10},
                            },
                        },
                        Init: &ast.EmptyExpr{
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:5},
                                End:   ast.Location{Line:3, Column:8},
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start: ast.Location{Line:2, Column:5},
                            End:   ast.Location{Line:3, Column:8},
                        },
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:2, Column:5},
                        End:   ast.Location{Line:3, Column:8},
                    },
                },
                &ast.DeclStmt{
                    Decl: &ast.VarDecl{
                        Kind: 0,
                        Name: &ast.Ident{
                            Name: "b",
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:9},
                                End:   ast.Location{Line:3, Column:10},
                            },
                        },
                        Init: &ast.LiteralExpr{
                            Lit:  &ast.NumLit{Value:5},
                            span: ast.Span{
                                Start: ast.Location{Line:3, Column:13},
                                End:   ast.Location{Line:3, Column:14},
                            },
                            inferredType: nil,
                        },
                        export:  false,
                        declare: false,
                        span:    ast.Span{
                            Start: ast.Location{Line:3, Column:5},
                            End:   ast.Location{Line:3, Column:14},
                        },
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:3, Column:5},
                        End:   ast.Location{Line:3, Column:14},
                    },
                },
                &ast.ReturnStmt{
                    Expr: &ast.BinaryExpr{
                        Left: &ast.IdentExpr{
                            Name: "a",
                            span: ast.Span{
                                Start: ast.Location{Line:4, Column:12},
                                End:   ast.Location{Line:4, Column:13},
                            },
                            inferredType: nil,
                        },
                        Op:    0,
                        Right: &ast.EmptyExpr{
                            span: ast.Span{
                                Start: ast.Location{Line:5, Column:4},
                                End:   ast.Location{Line:5, Column:5},
                            },
                            inferredType: nil,
                        },
                        span: ast.Span{
                            Start: ast.Location{Line:4, Column:12},
                            End:   ast.Location{Line:5, Column:5},
                        },
                        inferredType: nil,
                    },
                    span: ast.Span{
                        Start: ast.Location{Line:4, Column:5},
                        End:   ast.Location{Line:5, Column:5},
                    },
                },
            },
            Span: ast.Span{
                Start: ast.Location{Line:1, Column:10},
                End:   ast.Location{Line:5, Column:5},
            },
        },
        export:  false,
        declare: false,
        span:    ast.Span{
            Start: ast.Location{Line:1, Column:1},
            End:   ast.Location{Line:5, Column:5},
        },
    },
    span: ast.Span{
        Start: ast.Location{Line:1, Column:1},
        End:   ast.Location{Line:5, Column:5},
    },
}
---

[TestParseStmtErrorHandling/FunctionDeclWithIncompleteStmts - 2]
[]*parser.Error{
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:3, Column:5},
            End:   ast.Location{Line:3, Column:8},
        },
        Message: "Expected an expression",
    },
    &parser.Error{
        Span: ast.Span{
            Start: ast.Location{Line:5, Column:4},
            End:   ast.Location{Line:5, Column:5},
        },
        Message: "Expected an expression",
    },
}
---
