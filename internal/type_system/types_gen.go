// Code generated by tools/gen_provenance.go; DO NOT EDIT.

package type_system

import . "github.com/escalier-lang/escalier/internal/provenance"

func (t *TypeVarType) Provenance() Provenance     { return t.provenance }
func (t *TypeVarType) SetProvenance(p Provenance) { t.provenance = p }
func (t *TypeVarType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *TypeRefType) Provenance() Provenance     { return t.provenance }
func (t *TypeRefType) SetProvenance(p Provenance) { t.provenance = p }
func (t *TypeRefType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *PrimType) Provenance() Provenance     { return t.provenance }
func (t *PrimType) SetProvenance(p Provenance) { t.provenance = p }
func (t *PrimType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *RegexType) Provenance() Provenance     { return t.provenance }
func (t *RegexType) SetProvenance(p Provenance) { t.provenance = p }
func (t *RegexType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *LitType) Provenance() Provenance     { return t.provenance }
func (t *LitType) SetProvenance(p Provenance) { t.provenance = p }
func (t *LitType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *UniqueSymbolType) Provenance() Provenance     { return t.provenance }
func (t *UniqueSymbolType) SetProvenance(p Provenance) { t.provenance = p }
func (t *UniqueSymbolType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *UnknownType) Provenance() Provenance     { return t.provenance }
func (t *UnknownType) SetProvenance(p Provenance) { t.provenance = p }
func (t *UnknownType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *NeverType) Provenance() Provenance     { return t.provenance }
func (t *NeverType) SetProvenance(p Provenance) { t.provenance = p }
func (t *NeverType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *AnyType) Provenance() Provenance     { return t.provenance }
func (t *AnyType) SetProvenance(p Provenance) { t.provenance = p }
func (t *AnyType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *GlobalThisType) Provenance() Provenance     { return t.provenance }
func (t *GlobalThisType) SetProvenance(p Provenance) { t.provenance = p }
func (t *GlobalThisType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *FuncType) Provenance() Provenance     { return t.provenance }
func (t *FuncType) SetProvenance(p Provenance) { t.provenance = p }
func (t *FuncType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *ObjectType) Provenance() Provenance     { return t.provenance }
func (t *ObjectType) SetProvenance(p Provenance) { t.provenance = p }
func (t *ObjectType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *TupleType) Provenance() Provenance     { return t.provenance }
func (t *TupleType) SetProvenance(p Provenance) { t.provenance = p }
func (t *TupleType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *RestSpreadType) Provenance() Provenance     { return t.provenance }
func (t *RestSpreadType) SetProvenance(p Provenance) { t.provenance = p }
func (t *RestSpreadType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *UnionType) Provenance() Provenance     { return t.provenance }
func (t *UnionType) SetProvenance(p Provenance) { t.provenance = p }
func (t *UnionType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *IntersectionType) Provenance() Provenance     { return t.provenance }
func (t *IntersectionType) SetProvenance(p Provenance) { t.provenance = p }
func (t *IntersectionType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *KeyOfType) Provenance() Provenance     { return t.provenance }
func (t *KeyOfType) SetProvenance(p Provenance) { t.provenance = p }
func (t *KeyOfType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *IndexType) Provenance() Provenance     { return t.provenance }
func (t *IndexType) SetProvenance(p Provenance) { t.provenance = p }
func (t *IndexType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *CondType) Provenance() Provenance     { return t.provenance }
func (t *CondType) SetProvenance(p Provenance) { t.provenance = p }
func (t *CondType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *InferType) Provenance() Provenance     { return t.provenance }
func (t *InferType) SetProvenance(p Provenance) { t.provenance = p }
func (t *InferType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *MutableType) Provenance() Provenance     { return t.provenance }
func (t *MutableType) SetProvenance(p Provenance) { t.provenance = p }
func (t *MutableType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *WildcardType) Provenance() Provenance     { return t.provenance }
func (t *WildcardType) SetProvenance(p Provenance) { t.provenance = p }
func (t *WildcardType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *ExtractorType) Provenance() Provenance     { return t.provenance }
func (t *ExtractorType) SetProvenance(p Provenance) { t.provenance = p }
func (t *ExtractorType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *TemplateLitType) Provenance() Provenance     { return t.provenance }
func (t *TemplateLitType) SetProvenance(p Provenance) { t.provenance = p }
func (t *TemplateLitType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *IntrinsicType) Provenance() Provenance     { return t.provenance }
func (t *IntrinsicType) SetProvenance(p Provenance) { t.provenance = p }
func (t *IntrinsicType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}

func (t *NamespaceType) Provenance() Provenance     { return t.provenance }
func (t *NamespaceType) SetProvenance(p Provenance) { t.provenance = p }
func (t *NamespaceType) WithProvenance(p Provenance) Type {
	result := *t // Create a copy of the struct
	result.provenance = p
	return &result
}
