// Code generated by tools/gen_ast/gen_gen_ast.go; DO NOT EDIT.

package ast

func (node *LitTypeAnn) Span() Span             { return node.span }
func (node *LitTypeAnn) InferredType() Type     { return node.inferredType }
func (node *LitTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *NumberTypeAnn) Span() Span             { return node.span }
func (node *NumberTypeAnn) InferredType() Type     { return node.inferredType }
func (node *NumberTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *StringTypeAnn) Span() Span             { return node.span }
func (node *StringTypeAnn) InferredType() Type     { return node.inferredType }
func (node *StringTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *BooleanTypeAnn) Span() Span             { return node.span }
func (node *BooleanTypeAnn) InferredType() Type     { return node.inferredType }
func (node *BooleanTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *SymbolTypeAnn) Span() Span             { return node.span }
func (node *SymbolTypeAnn) InferredType() Type     { return node.inferredType }
func (node *SymbolTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *UniqueSymbolTypeAnn) Span() Span             { return node.span }
func (node *UniqueSymbolTypeAnn) InferredType() Type     { return node.inferredType }
func (node *UniqueSymbolTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *AnyTypeAnn) Span() Span             { return node.span }
func (node *AnyTypeAnn) InferredType() Type     { return node.inferredType }
func (node *AnyTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *UnknownTypeAnn) Span() Span             { return node.span }
func (node *UnknownTypeAnn) InferredType() Type     { return node.inferredType }
func (node *UnknownTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *NeverTypeAnn) Span() Span             { return node.span }
func (node *NeverTypeAnn) InferredType() Type     { return node.inferredType }
func (node *NeverTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *RestSpreadTypeAnn) Span() Span             { return node.span }
func (node *RestSpreadTypeAnn) InferredType() Type     { return node.inferredType }
func (node *RestSpreadTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *ObjectTypeAnn) Span() Span             { return node.span }
func (node *ObjectTypeAnn) InferredType() Type     { return node.inferredType }
func (node *ObjectTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *TupleTypeAnn) Span() Span             { return node.span }
func (node *TupleTypeAnn) InferredType() Type     { return node.inferredType }
func (node *TupleTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *UnionTypeAnn) Span() Span             { return node.span }
func (node *UnionTypeAnn) InferredType() Type     { return node.inferredType }
func (node *UnionTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *IntersectionTypeAnn) Span() Span             { return node.span }
func (node *IntersectionTypeAnn) InferredType() Type     { return node.inferredType }
func (node *IntersectionTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *TypeRefTypeAnn) Span() Span             { return node.span }
func (node *TypeRefTypeAnn) InferredType() Type     { return node.inferredType }
func (node *TypeRefTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *FuncTypeAnn) Span() Span             { return node.span }
func (node *FuncTypeAnn) InferredType() Type     { return node.inferredType }
func (node *FuncTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *KeyOfTypeAnn) Span() Span             { return node.span }
func (node *KeyOfTypeAnn) InferredType() Type     { return node.inferredType }
func (node *KeyOfTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *TypeOfTypeAnn) Span() Span             { return node.span }
func (node *TypeOfTypeAnn) InferredType() Type     { return node.inferredType }
func (node *TypeOfTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *IndexTypeAnn) Span() Span             { return node.span }
func (node *IndexTypeAnn) InferredType() Type     { return node.inferredType }
func (node *IndexTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *CondTypeAnn) Span() Span             { return node.span }
func (node *CondTypeAnn) InferredType() Type     { return node.inferredType }
func (node *CondTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *MatchTypeAnn) Span() Span             { return node.span }
func (node *MatchTypeAnn) InferredType() Type     { return node.inferredType }
func (node *MatchTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *InferTypeAnn) Span() Span             { return node.span }
func (node *InferTypeAnn) InferredType() Type     { return node.inferredType }
func (node *InferTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *WildcardTypeAnn) Span() Span             { return node.span }
func (node *WildcardTypeAnn) InferredType() Type     { return node.inferredType }
func (node *WildcardTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *TemplateLitTypeAnn) Span() Span             { return node.span }
func (node *TemplateLitTypeAnn) InferredType() Type     { return node.inferredType }
func (node *TemplateLitTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *IntrinsicTypeAnn) Span() Span             { return node.span }
func (node *IntrinsicTypeAnn) InferredType() Type     { return node.inferredType }
func (node *IntrinsicTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *ImportType) Span() Span             { return node.span }
func (node *ImportType) InferredType() Type     { return node.inferredType }
func (node *ImportType) SetInferredType(t Type) { node.inferredType = t }

func (node *MutableTypeAnn) Span() Span             { return node.span }
func (node *MutableTypeAnn) InferredType() Type     { return node.inferredType }
func (node *MutableTypeAnn) SetInferredType(t Type) { node.inferredType = t }

func (node *EmptyTypeAnn) Span() Span             { return node.span }
func (node *EmptyTypeAnn) InferredType() Type     { return node.inferredType }
func (node *EmptyTypeAnn) SetInferredType(t Type) { node.inferredType = t }
