// Code generated by tools/gen_ast/gen_gen_ast.go; DO NOT EDIT.

package ast

func (node *IgnoreExpr) Span() Span             { return node.span }
func (node *IgnoreExpr) InferredType() Type     { return node.inferredType }
func (node *IgnoreExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *EmptyExpr) Span() Span             { return node.span }
func (node *EmptyExpr) InferredType() Type     { return node.inferredType }
func (node *EmptyExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *BinaryExpr) Span() Span             { return node.span }
func (node *BinaryExpr) InferredType() Type     { return node.inferredType }
func (node *BinaryExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *UnaryExpr) Span() Span             { return node.span }
func (node *UnaryExpr) InferredType() Type     { return node.inferredType }
func (node *UnaryExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *LiteralExpr) Span() Span             { return node.span }
func (node *LiteralExpr) InferredType() Type     { return node.inferredType }
func (node *LiteralExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *IdentExpr) Span() Span             { return node.span }
func (node *IdentExpr) InferredType() Type     { return node.inferredType }
func (node *IdentExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *FuncExpr) Span() Span             { return node.span }
func (node *FuncExpr) InferredType() Type     { return node.inferredType }
func (node *FuncExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *CallExpr) Span() Span             { return node.span }
func (node *CallExpr) InferredType() Type     { return node.inferredType }
func (node *CallExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *IndexExpr) Span() Span             { return node.span }
func (node *IndexExpr) InferredType() Type     { return node.inferredType }
func (node *IndexExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *MemberExpr) Span() Span             { return node.span }
func (node *MemberExpr) InferredType() Type     { return node.inferredType }
func (node *MemberExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *TupleExpr) Span() Span             { return node.span }
func (node *TupleExpr) InferredType() Type     { return node.inferredType }
func (node *TupleExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *ObjectExpr) Span() Span             { return node.span }
func (node *ObjectExpr) InferredType() Type     { return node.inferredType }
func (node *ObjectExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *IfElseExpr) Span() Span             { return node.span }
func (node *IfElseExpr) InferredType() Type     { return node.inferredType }
func (node *IfElseExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *IfLetExpr) Span() Span             { return node.span }
func (node *IfLetExpr) InferredType() Type     { return node.inferredType }
func (node *IfLetExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *MatchExpr) Span() Span             { return node.span }
func (node *MatchExpr) InferredType() Type     { return node.inferredType }
func (node *MatchExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *AssignExpr) Span() Span             { return node.span }
func (node *AssignExpr) InferredType() Type     { return node.inferredType }
func (node *AssignExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *TryCatchExpr) Span() Span             { return node.span }
func (node *TryCatchExpr) InferredType() Type     { return node.inferredType }
func (node *TryCatchExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *ThrowExpr) Span() Span             { return node.span }
func (node *ThrowExpr) InferredType() Type     { return node.inferredType }
func (node *ThrowExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *DoExpr) Span() Span             { return node.span }
func (node *DoExpr) InferredType() Type     { return node.inferredType }
func (node *DoExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *AwaitExpr) Span() Span             { return node.span }
func (node *AwaitExpr) InferredType() Type     { return node.inferredType }
func (node *AwaitExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *TemplateLitExpr) Span() Span             { return node.span }
func (node *TemplateLitExpr) InferredType() Type     { return node.inferredType }
func (node *TemplateLitExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *TaggedTemplateLitExpr) Span() Span             { return node.span }
func (node *TaggedTemplateLitExpr) InferredType() Type     { return node.inferredType }
func (node *TaggedTemplateLitExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *JSXElementExpr) Span() Span             { return node.span }
func (node *JSXElementExpr) InferredType() Type     { return node.inferredType }
func (node *JSXElementExpr) SetInferredType(t Type) { node.inferredType = t }

func (node *JSXFragmentExpr) Span() Span             { return node.span }
func (node *JSXFragmentExpr) InferredType() Type     { return node.inferredType }
func (node *JSXFragmentExpr) SetInferredType(t Type) { node.inferredType = t }
