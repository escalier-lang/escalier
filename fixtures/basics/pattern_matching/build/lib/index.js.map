{"version":3,"file":"./index.js","sources":["../../lib/pattern_matching.esc"],"sourcesContent":["// Basic pattern matching examples\n\ntype Point = {x: number, y: number}\n\n// Simple literal matching\nval num1: number = 5\nexport val literalMatch = match num1 {\n    1 =\u003e \"one\",\n    2 =\u003e \"two\", \n    5 =\u003e \"five\",\n    _ =\u003e \"other\"\n}\n\n// Variable binding pattern\nvar num2: number = 42\nexport val variableMatch = match num2 {\n    x =\u003e x * 2\n}\n\n// Tuple pattern matching\nexport val tupleValue: [number, number, number] = [1, 2, 3]\nexport val tupleMatch = match tupleValue {\n    [a, b, c] =\u003e a + b + c,\n    _ =\u003e 0\n}\n\n// Object pattern matching\nexport val objectValue: Point = {x: 10, y: 20}\nexport val objectMatch = match objectValue {\n    {x, y} =\u003e x + y,\n    _ =\u003e 0\n}\n\n// Object pattern with renaming\nexport val objectRename = match objectValue {\n    {x: a, y: b} =\u003e a * b,\n    _ =\u003e 0\n}\n\n// Nested pattern matching\nexport val nestedValue: {point: [number, number]} = {point: [1, 2]}\nexport val nestedMatch = match nestedValue {\n    {point: [x, y]} =\u003e x + y,\n    _ =\u003e 0\n}\n\n// Pattern matching with guards\nval tuple2: [number, number] = [3, 3]\nexport val guardMatch = match tuple2 {\n    [a, b] if a == b =\u003e \"equal\",\n    [a, b] =\u003e \"not equal\"\n}\n\n// Multiple cases\nval str: string = \"hello\"\nexport val multiCase = match str {\n    \"hi\" =\u003e \"greeting\",\n    \"hello\" =\u003e \"salutation\", \n    \"bye\" =\u003e \"farewell\",\n    _ =\u003e \"unknown\"\n}\n\n// Boolean literal matching\nval bool: boolean = true\nexport val boolMatch = match bool {\n    true =\u003e \"yes\",\n    false =\u003e \"no\"\n}\n\n// Mixed literal and variable patterns\nval num3: number = 7\nexport val mixedMatch = match num3 {\n    1 =\u003e \"one\",\n    2 =\u003e \"two\",\n    n =\u003e \"number: \" ++ n.toString()\n}\n\n// Tuple rest patterns\nexport val longTuple: [number, number, number] = [1, 2, 3]\nexport val tupleRestMatch = match longTuple {\n    [first, ...rest] =\u003e rest,\n    _ =\u003e 0\n}\n\n// Object rest patterns\ntype ExtendedPoint = {x: number, y: number, z: number, name: string}\nexport val extendedPoint: ExtendedPoint = {x: 1, y: 2, z: 3, name: \"point\"}\nexport val objectRestMatch = match extendedPoint {\n    {x, y, ...rest} =\u003e rest,\n    _ =\u003e 0\n}\n\ndeclare val ref: {value: string | number | boolean}\nexport val refMatch = match ref {\n    {value: a:string} =\u003e \"string\",\n    {value: b:number} =\u003e \"number\",\n    {value: c:boolean} =\u003e \"boolean\",\n}\n"],"names":[],"mappings":"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"}