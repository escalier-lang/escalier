package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"
	"text/template"
)

func main() {
	if len(os.Args) < 3 {
		log.Fatal("Please provide path to gen_ast.go")
	}

	arg := os.Args[1]
	if !strings.HasPrefix(arg, "-p") {
		log.Fatalf("Expected argument to start with '-p', got: %s", arg)
	}
	inputPath := os.Args[2]
	outputPath := strings.Replace(inputPath, ".go", "_gen.go", 1)

	fmt.Printf("inputPath = %s\n", inputPath)
	fmt.Printf("outputPath = %s\n", outputPath)

	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, inputPath, nil, parser.ParseComments)
	if err != nil {
		log.Fatalf("Error parsing file: %v", err)
	}

	var typeStructs []string

	// Find all struct types that implement Type interface
	ast.Inspect(node, func(n ast.Node) bool {
		typeSpec, ok := n.(*ast.TypeSpec)
		if !ok {
			return true
		}

		structType, ok := typeSpec.Type.(*ast.StructType)
		if !ok {
			return true
		}

		// Check if this type has a inferredType field
		hasInferredType := false
		for _, field := range structType.Fields.List {
			if len(field.Names) > 0 && field.Names[0].Name == "inferredType" {
				hasInferredType = true
				break
			}
		}

		if hasInferredType {
			typeStructs = append(typeStructs, typeSpec.Name.Name)
		}

		return true
	})

	// Generate inferredType getter/setters
	var buf bytes.Buffer
	buf.WriteString("// Code generated by tools/gen_ast/gen_gen_ast.go; DO NOT EDIT.\n\n")
	buf.WriteString("package ast\n\n")

	tmpl := template.Must(template.New("inferredType").Parse(`
func (node *{{.}}) Span() Span 			   { return node.span }
func (node *{{.}}) InferredType() Type     { return node.inferredType }
func (node *{{.}}) SetInferredType(t Type) { node.inferredType = t }
`))

	for _, typeName := range typeStructs {
		err = tmpl.Execute(&buf, typeName)
		if err != nil {
			log.Fatalf("Error executing template: %v", err)
		}
	}

	// Format the generated code
	formattedCode, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Error formatting code: %v", err)
	}

	// Write to file
	err = os.WriteFile(outputPath, formattedCode, 0644)
	if err != nil {
		log.Fatalf("Error writing file: %v", err)
	}

	fmt.Printf("Generated inferredType methods for %d types\n", len(typeStructs))
}
